{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "HBE-6kQEma8F"
      },
      "outputs": [],
      "source": [
        "#import libraries\n",
        "import pandas as pd\n",
        "import numpy as np"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df1 = pd.read_csv('/content/drive/MyDrive/pickupdata/pickup_cq.csv')\n"
      ],
      "metadata": {
        "id": "CF3VRgwzpSx-"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Rp-OvrL5pY1U"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2 = pd.read_csv('/content/drive/MyDrive/pickupdata/pickup_hz.csv')\n",
        "df2['city'] = 'Chongqing'"
      ],
      "metadata": {
        "id": "5nGSvod3pagI"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df2.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "bnkZIMwnLOl_",
        "outputId": "9b5380cd-3c85-49ec-ba7d-9d4650cd426b"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   order_id  region_id       city  courier_id     accept_time  \\\n",
              "0   4965037          1  Chongqing        6885  07-14 09:21:00   \n",
              "1   1309531          1  Chongqing       13428  07-19 08:05:00   \n",
              "2   4390255          1  Chongqing       13428  10-20 11:24:00   \n",
              "3   5702636          1  Chongqing       13428  10-29 12:48:00   \n",
              "4   1187003          1  Chongqing       13428  10-16 07:59:00   \n",
              "\n",
              "  time_window_start time_window_end        lng       lat  aoi_id  aoi_type  \\\n",
              "0    07-14 17:00:00  07-14 19:00:00  120.11976  30.32921     102        14   \n",
              "1    07-19 09:00:00  07-19 11:00:00  120.02190  30.37915     202         1   \n",
              "2    10-20 17:00:00  10-20 19:00:00  120.02184  30.37902     202         1   \n",
              "3    10-29 17:02:00  10-29 19:02:00  120.02195  30.37904     202         1   \n",
              "4    10-16 09:00:00  10-16 11:00:00  120.02181  30.37916     202         1   \n",
              "\n",
              "      pickup_time pickup_gps_time  pickup_gps_lng  pickup_gps_lat  \\\n",
              "0  07-14 17:14:00  07-14 17:14:00       120.11809        30.33748   \n",
              "1  07-19 08:47:00             NaN             NaN             NaN   \n",
              "2  10-20 17:50:00             NaN             NaN             NaN   \n",
              "3  10-29 17:00:00             NaN             NaN             NaN   \n",
              "4  10-16 09:56:00             NaN             NaN             NaN   \n",
              "\n",
              "  accept_gps_time  accept_gps_lng  accept_gps_lat      ds  \n",
              "0  07-14 09:21:00       120.13181        30.34463   714.0  \n",
              "1             NaN             NaN             NaN   719.0  \n",
              "2             NaN             NaN             NaN  1020.0  \n",
              "3             NaN             NaN             NaN  1029.0  \n",
              "4             NaN             NaN             NaN  1016.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-dfd02850-17ed-4f30-893c-cf5e5f793db1\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>region_id</th>\n",
              "      <th>city</th>\n",
              "      <th>courier_id</th>\n",
              "      <th>accept_time</th>\n",
              "      <th>time_window_start</th>\n",
              "      <th>time_window_end</th>\n",
              "      <th>lng</th>\n",
              "      <th>lat</th>\n",
              "      <th>aoi_id</th>\n",
              "      <th>aoi_type</th>\n",
              "      <th>pickup_time</th>\n",
              "      <th>pickup_gps_time</th>\n",
              "      <th>pickup_gps_lng</th>\n",
              "      <th>pickup_gps_lat</th>\n",
              "      <th>accept_gps_time</th>\n",
              "      <th>accept_gps_lng</th>\n",
              "      <th>accept_gps_lat</th>\n",
              "      <th>ds</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4965037</td>\n",
              "      <td>1</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>6885</td>\n",
              "      <td>07-14 09:21:00</td>\n",
              "      <td>07-14 17:00:00</td>\n",
              "      <td>07-14 19:00:00</td>\n",
              "      <td>120.11976</td>\n",
              "      <td>30.32921</td>\n",
              "      <td>102</td>\n",
              "      <td>14</td>\n",
              "      <td>07-14 17:14:00</td>\n",
              "      <td>07-14 17:14:00</td>\n",
              "      <td>120.11809</td>\n",
              "      <td>30.33748</td>\n",
              "      <td>07-14 09:21:00</td>\n",
              "      <td>120.13181</td>\n",
              "      <td>30.34463</td>\n",
              "      <td>714.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1309531</td>\n",
              "      <td>1</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>13428</td>\n",
              "      <td>07-19 08:05:00</td>\n",
              "      <td>07-19 09:00:00</td>\n",
              "      <td>07-19 11:00:00</td>\n",
              "      <td>120.02190</td>\n",
              "      <td>30.37915</td>\n",
              "      <td>202</td>\n",
              "      <td>1</td>\n",
              "      <td>07-19 08:47:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>719.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4390255</td>\n",
              "      <td>1</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>13428</td>\n",
              "      <td>10-20 11:24:00</td>\n",
              "      <td>10-20 17:00:00</td>\n",
              "      <td>10-20 19:00:00</td>\n",
              "      <td>120.02184</td>\n",
              "      <td>30.37902</td>\n",
              "      <td>202</td>\n",
              "      <td>1</td>\n",
              "      <td>10-20 17:50:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1020.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5702636</td>\n",
              "      <td>1</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>13428</td>\n",
              "      <td>10-29 12:48:00</td>\n",
              "      <td>10-29 17:02:00</td>\n",
              "      <td>10-29 19:02:00</td>\n",
              "      <td>120.02195</td>\n",
              "      <td>30.37904</td>\n",
              "      <td>202</td>\n",
              "      <td>1</td>\n",
              "      <td>10-29 17:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1029.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1187003</td>\n",
              "      <td>1</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>13428</td>\n",
              "      <td>10-16 07:59:00</td>\n",
              "      <td>10-16 09:00:00</td>\n",
              "      <td>10-16 11:00:00</td>\n",
              "      <td>120.02181</td>\n",
              "      <td>30.37916</td>\n",
              "      <td>202</td>\n",
              "      <td>1</td>\n",
              "      <td>10-16 09:56:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1016.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-dfd02850-17ed-4f30-893c-cf5e5f793db1')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-dfd02850-17ed-4f30-893c-cf5e5f793db1 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-dfd02850-17ed-4f30-893c-cf5e5f793db1');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-40b432bc-486a-4823-9321-b2d125d0e141\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-40b432bc-486a-4823-9321-b2d125d0e141')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-40b432bc-486a-4823-9321-b2d125d0e141 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df2"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "df3 = pd.read_csv('/content/drive/MyDrive/pickupdata/pickup_jl.csv')\n",
        "df3['city'] = 'Chongqing'\n",
        "df4 = pd.read_csv('/content/drive/MyDrive/pickupdata/pickup_sh.csv')\n",
        "df4['city'] = 'Chongqing'\n",
        "df5 = pd.read_csv('/content/drive/MyDrive/pickupdata/pickup_yt.csv')\n",
        "df5['city'] = 'Chongqing'\n",
        "\n"
      ],
      "metadata": {
        "id": "GjE4D6hqLVK4"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#merging all Pickup data\n",
        "\n",
        "df = pd.concat([df1, df2, df3, df4, df5],ignore_index=True)\n",
        "df5.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "AG67cP1mL3F1",
        "outputId": "0375cd38-5f87-4a65-b8cb-97561dcf9ff9"
      },
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   order_id  region_id       city  courier_id     accept_time  \\\n",
              "0   4732519         16  Chongqing         992  05-18 08:16:00   \n",
              "1   5411237         16  Chongqing         992  05-14 09:17:00   \n",
              "2    143142         16  Chongqing         992  05-10 15:30:00   \n",
              "3   3421498         16  Chongqing         992  05-05 12:47:00   \n",
              "4    362894         16  Chongqing         992  05-11 08:02:00   \n",
              "\n",
              "  time_window_start time_window_end        lng       lat  aoi_id  aoi_type  \\\n",
              "0    05-18 09:00:00  05-18 11:00:00  121.21661  36.77277      32         1   \n",
              "1    05-14 13:00:00  05-14 15:00:00  121.21923  36.77317      32         1   \n",
              "2    05-10 15:30:00  05-10 17:30:00  121.22025  36.77384      32         1   \n",
              "3    05-05 12:47:00  05-05 14:47:00  121.21676  36.77269      32         1   \n",
              "4    05-11 09:00:00  05-11 11:00:00  121.22031  36.77385      32         1   \n",
              "\n",
              "      pickup_time pickup_gps_time  pickup_gps_lng  pickup_gps_lat  \\\n",
              "0  05-18 08:42:00  05-18 08:42:00       121.22029        36.77386   \n",
              "1  05-14 12:40:00  05-14 12:40:00       121.22033        36.77403   \n",
              "2  05-10 15:54:00  05-10 15:54:00       121.22032        36.77409   \n",
              "3  05-05 13:50:00  05-05 13:50:00       121.22058        36.77391   \n",
              "4  05-11 09:04:00  05-11 09:03:00       121.22030        36.77395   \n",
              "\n",
              "  accept_gps_time  accept_gps_lng  accept_gps_lat   ds  \n",
              "0  05-18 08:10:00       121.21800        36.77443  518  \n",
              "1  05-14 09:16:00       121.21094        36.78368  514  \n",
              "2  05-10 15:29:00       121.22023        36.77399  510  \n",
              "3             NaN             NaN             NaN  505  \n",
              "4  05-11 07:58:00       121.21808        36.77453  511  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d3a4d218-5936-402a-8103-c7697c9eaaf0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>region_id</th>\n",
              "      <th>city</th>\n",
              "      <th>courier_id</th>\n",
              "      <th>accept_time</th>\n",
              "      <th>time_window_start</th>\n",
              "      <th>time_window_end</th>\n",
              "      <th>lng</th>\n",
              "      <th>lat</th>\n",
              "      <th>aoi_id</th>\n",
              "      <th>aoi_type</th>\n",
              "      <th>pickup_time</th>\n",
              "      <th>pickup_gps_time</th>\n",
              "      <th>pickup_gps_lng</th>\n",
              "      <th>pickup_gps_lat</th>\n",
              "      <th>accept_gps_time</th>\n",
              "      <th>accept_gps_lng</th>\n",
              "      <th>accept_gps_lat</th>\n",
              "      <th>ds</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4732519</td>\n",
              "      <td>16</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>992</td>\n",
              "      <td>05-18 08:16:00</td>\n",
              "      <td>05-18 09:00:00</td>\n",
              "      <td>05-18 11:00:00</td>\n",
              "      <td>121.21661</td>\n",
              "      <td>36.77277</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "      <td>05-18 08:42:00</td>\n",
              "      <td>05-18 08:42:00</td>\n",
              "      <td>121.22029</td>\n",
              "      <td>36.77386</td>\n",
              "      <td>05-18 08:10:00</td>\n",
              "      <td>121.21800</td>\n",
              "      <td>36.77443</td>\n",
              "      <td>518</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5411237</td>\n",
              "      <td>16</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>992</td>\n",
              "      <td>05-14 09:17:00</td>\n",
              "      <td>05-14 13:00:00</td>\n",
              "      <td>05-14 15:00:00</td>\n",
              "      <td>121.21923</td>\n",
              "      <td>36.77317</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "      <td>05-14 12:40:00</td>\n",
              "      <td>05-14 12:40:00</td>\n",
              "      <td>121.22033</td>\n",
              "      <td>36.77403</td>\n",
              "      <td>05-14 09:16:00</td>\n",
              "      <td>121.21094</td>\n",
              "      <td>36.78368</td>\n",
              "      <td>514</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>143142</td>\n",
              "      <td>16</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>992</td>\n",
              "      <td>05-10 15:30:00</td>\n",
              "      <td>05-10 15:30:00</td>\n",
              "      <td>05-10 17:30:00</td>\n",
              "      <td>121.22025</td>\n",
              "      <td>36.77384</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "      <td>05-10 15:54:00</td>\n",
              "      <td>05-10 15:54:00</td>\n",
              "      <td>121.22032</td>\n",
              "      <td>36.77409</td>\n",
              "      <td>05-10 15:29:00</td>\n",
              "      <td>121.22023</td>\n",
              "      <td>36.77399</td>\n",
              "      <td>510</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3421498</td>\n",
              "      <td>16</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>992</td>\n",
              "      <td>05-05 12:47:00</td>\n",
              "      <td>05-05 12:47:00</td>\n",
              "      <td>05-05 14:47:00</td>\n",
              "      <td>121.21676</td>\n",
              "      <td>36.77269</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "      <td>05-05 13:50:00</td>\n",
              "      <td>05-05 13:50:00</td>\n",
              "      <td>121.22058</td>\n",
              "      <td>36.77391</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>505</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>362894</td>\n",
              "      <td>16</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>992</td>\n",
              "      <td>05-11 08:02:00</td>\n",
              "      <td>05-11 09:00:00</td>\n",
              "      <td>05-11 11:00:00</td>\n",
              "      <td>121.22031</td>\n",
              "      <td>36.77385</td>\n",
              "      <td>32</td>\n",
              "      <td>1</td>\n",
              "      <td>05-11 09:04:00</td>\n",
              "      <td>05-11 09:03:00</td>\n",
              "      <td>121.22030</td>\n",
              "      <td>36.77395</td>\n",
              "      <td>05-11 07:58:00</td>\n",
              "      <td>121.21808</td>\n",
              "      <td>36.77453</td>\n",
              "      <td>511</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3a4d218-5936-402a-8103-c7697c9eaaf0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d3a4d218-5936-402a-8103-c7697c9eaaf0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d3a4d218-5936-402a-8103-c7697c9eaaf0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8ba5d551-2c38-43be-8c3b-9564913187dd\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8ba5d551-2c38-43be-8c3b-9564913187dd')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8ba5d551-2c38-43be-8c3b-9564913187dd button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df5"
            }
          },
          "metadata": {},
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "sHUOZYHIMNEt"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#drop DuplicatValues and FInd Percenatages of MIssing Values\n",
        "\n",
        "df = df.drop_duplicates()\n",
        "missing_value_counts = df.isnull().sum()\n",
        "missing_Percentage = (missing_value_counts / len(df)) * 100\n",
        "missing_Percentage\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 679
        },
        "id": "WBKWVM76MIxL",
        "outputId": "25033d56-cbea-4960-d9af-e45500d3ecde"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "order_id              0.000000\n",
              "region_id             0.000000\n",
              "city                  0.000000\n",
              "courier_id            0.000000\n",
              "accept_time           0.000000\n",
              "time_window_start     0.000000\n",
              "time_window_end       0.000000\n",
              "lng                   0.000000\n",
              "lat                   0.000000\n",
              "aoi_id                0.000000\n",
              "aoi_type              0.000000\n",
              "pickup_time           0.000000\n",
              "pickup_gps_time      28.143716\n",
              "pickup_gps_lng       28.143716\n",
              "pickup_gps_lat       28.143716\n",
              "accept_gps_time      44.314262\n",
              "accept_gps_lng       44.314262\n",
              "accept_gps_lat       44.314262\n",
              "ds                    0.000017\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>order_id</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region_id</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>city</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>courier_id</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_time</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>time_window_start</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>time_window_end</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lng</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lat</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aoi_id</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aoi_type</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_time</th>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_gps_time</th>\n",
              "      <td>28.143716</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_gps_lng</th>\n",
              "      <td>28.143716</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_gps_lat</th>\n",
              "      <td>28.143716</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_time</th>\n",
              "      <td>44.314262</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_lng</th>\n",
              "      <td>44.314262</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_lat</th>\n",
              "      <td>44.314262</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ds</th>\n",
              "      <td>0.000017</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#missing  values in Greater Than 5% so Remove them\n",
        "df_filterd = df.dropna(axis=0)"
      ],
      "metadata": {
        "id": "fuaF0y3mOmYm"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_filterd.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 679
        },
        "id": "JA5xAK-NVYOh",
        "outputId": "f91a8e94-6f6b-430a-e3f9-6788ecbeba7a"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "order_id             0\n",
              "region_id            0\n",
              "city                 0\n",
              "courier_id           0\n",
              "accept_time          0\n",
              "time_window_start    0\n",
              "time_window_end      0\n",
              "lng                  0\n",
              "lat                  0\n",
              "aoi_id               0\n",
              "aoi_type             0\n",
              "pickup_time          0\n",
              "pickup_gps_time      0\n",
              "pickup_gps_lng       0\n",
              "pickup_gps_lat       0\n",
              "accept_gps_time      0\n",
              "accept_gps_lng       0\n",
              "accept_gps_lat       0\n",
              "ds                   0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>order_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>city</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>courier_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_time</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>time_window_start</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>time_window_end</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lng</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lat</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aoi_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aoi_type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_time</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_gps_time</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_gps_lng</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_gps_lat</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_time</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_lng</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_lat</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ds</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_filterd.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "VgNd8m4hVexz",
        "outputId": "96a5dc51-e0c7-4d51-e8b2-96e7773ff309"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    order_id  region_id       city  courier_id     accept_time  \\\n",
              "2    2301722          3  Chongqing        4706  10-09 13:57:00   \n",
              "11    780972          3  Chongqing        4706  05-22 10:22:00   \n",
              "26    283833          3  Chongqing        6693  05-03 07:49:00   \n",
              "32   4315552          3  Chongqing         317  06-06 10:49:00   \n",
              "33    728111          3  Chongqing         317  05-21 09:06:00   \n",
              "\n",
              "   time_window_start time_window_end        lng       lat  aoi_id  aoi_type  \\\n",
              "2     10-09 13:57:00  10-09 15:57:00  106.46869  29.47191     218        14   \n",
              "11    05-22 10:22:00  05-22 12:22:00  106.46875  29.47208     218        14   \n",
              "26    05-03 17:00:00  05-03 19:00:00  106.46863  29.47203     218        14   \n",
              "32    06-06 11:00:00  06-06 13:00:00  106.46861  29.48829     337         1   \n",
              "33    05-21 11:00:00  05-21 13:00:00  106.46772  29.48808     337         1   \n",
              "\n",
              "       pickup_time pickup_gps_time  pickup_gps_lng  pickup_gps_lat  \\\n",
              "2   10-09 15:53:00  10-09 15:53:00       106.46821        29.46771   \n",
              "11  05-22 11:18:00  05-22 11:17:00       106.46930        29.47238   \n",
              "26  05-03 18:44:00  05-03 18:44:00       106.47037        29.47237   \n",
              "32  06-06 12:13:00  06-06 12:13:00       106.46860        29.48788   \n",
              "33  05-21 14:36:00  05-21 14:36:00       106.46918        29.48724   \n",
              "\n",
              "   accept_gps_time  accept_gps_lng  accept_gps_lat      ds  \n",
              "2   10-09 13:56:00       106.46929        29.47231  1009.0  \n",
              "11  05-22 10:22:00       106.47907        29.43180   522.0  \n",
              "26  05-03 07:49:00       106.49162        29.43503   503.0  \n",
              "32  06-06 10:49:00       106.47521        29.48561   606.0  \n",
              "33  05-21 09:06:00       106.46635        29.49159   521.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-27be60e0-8f83-4d26-9f4e-1dd4d44de3ce\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>region_id</th>\n",
              "      <th>city</th>\n",
              "      <th>courier_id</th>\n",
              "      <th>accept_time</th>\n",
              "      <th>time_window_start</th>\n",
              "      <th>time_window_end</th>\n",
              "      <th>lng</th>\n",
              "      <th>lat</th>\n",
              "      <th>aoi_id</th>\n",
              "      <th>aoi_type</th>\n",
              "      <th>pickup_time</th>\n",
              "      <th>pickup_gps_time</th>\n",
              "      <th>pickup_gps_lng</th>\n",
              "      <th>pickup_gps_lat</th>\n",
              "      <th>accept_gps_time</th>\n",
              "      <th>accept_gps_lng</th>\n",
              "      <th>accept_gps_lat</th>\n",
              "      <th>ds</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2301722</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>4706</td>\n",
              "      <td>10-09 13:57:00</td>\n",
              "      <td>10-09 13:57:00</td>\n",
              "      <td>10-09 15:57:00</td>\n",
              "      <td>106.46869</td>\n",
              "      <td>29.47191</td>\n",
              "      <td>218</td>\n",
              "      <td>14</td>\n",
              "      <td>10-09 15:53:00</td>\n",
              "      <td>10-09 15:53:00</td>\n",
              "      <td>106.46821</td>\n",
              "      <td>29.46771</td>\n",
              "      <td>10-09 13:56:00</td>\n",
              "      <td>106.46929</td>\n",
              "      <td>29.47231</td>\n",
              "      <td>1009.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>780972</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>4706</td>\n",
              "      <td>05-22 10:22:00</td>\n",
              "      <td>05-22 10:22:00</td>\n",
              "      <td>05-22 12:22:00</td>\n",
              "      <td>106.46875</td>\n",
              "      <td>29.47208</td>\n",
              "      <td>218</td>\n",
              "      <td>14</td>\n",
              "      <td>05-22 11:18:00</td>\n",
              "      <td>05-22 11:17:00</td>\n",
              "      <td>106.46930</td>\n",
              "      <td>29.47238</td>\n",
              "      <td>05-22 10:22:00</td>\n",
              "      <td>106.47907</td>\n",
              "      <td>29.43180</td>\n",
              "      <td>522.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>283833</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>6693</td>\n",
              "      <td>05-03 07:49:00</td>\n",
              "      <td>05-03 17:00:00</td>\n",
              "      <td>05-03 19:00:00</td>\n",
              "      <td>106.46863</td>\n",
              "      <td>29.47203</td>\n",
              "      <td>218</td>\n",
              "      <td>14</td>\n",
              "      <td>05-03 18:44:00</td>\n",
              "      <td>05-03 18:44:00</td>\n",
              "      <td>106.47037</td>\n",
              "      <td>29.47237</td>\n",
              "      <td>05-03 07:49:00</td>\n",
              "      <td>106.49162</td>\n",
              "      <td>29.43503</td>\n",
              "      <td>503.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>4315552</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>317</td>\n",
              "      <td>06-06 10:49:00</td>\n",
              "      <td>06-06 11:00:00</td>\n",
              "      <td>06-06 13:00:00</td>\n",
              "      <td>106.46861</td>\n",
              "      <td>29.48829</td>\n",
              "      <td>337</td>\n",
              "      <td>1</td>\n",
              "      <td>06-06 12:13:00</td>\n",
              "      <td>06-06 12:13:00</td>\n",
              "      <td>106.46860</td>\n",
              "      <td>29.48788</td>\n",
              "      <td>06-06 10:49:00</td>\n",
              "      <td>106.47521</td>\n",
              "      <td>29.48561</td>\n",
              "      <td>606.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>728111</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>317</td>\n",
              "      <td>05-21 09:06:00</td>\n",
              "      <td>05-21 11:00:00</td>\n",
              "      <td>05-21 13:00:00</td>\n",
              "      <td>106.46772</td>\n",
              "      <td>29.48808</td>\n",
              "      <td>337</td>\n",
              "      <td>1</td>\n",
              "      <td>05-21 14:36:00</td>\n",
              "      <td>05-21 14:36:00</td>\n",
              "      <td>106.46918</td>\n",
              "      <td>29.48724</td>\n",
              "      <td>05-21 09:06:00</td>\n",
              "      <td>106.46635</td>\n",
              "      <td>29.49159</td>\n",
              "      <td>521.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-27be60e0-8f83-4d26-9f4e-1dd4d44de3ce')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-27be60e0-8f83-4d26-9f4e-1dd4d44de3ce button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-27be60e0-8f83-4d26-9f4e-1dd4d44de3ce');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f39af6d4-206d-48b7-b150-beae9b230715\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f39af6d4-206d-48b7-b150-beae9b230715')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f39af6d4-206d-48b7-b150-beae9b230715 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_filterd"
            }
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "timestamps = df_filterd.select_dtypes(include = ['object','datetime64[ns]']).columns"
      ],
      "metadata": {
        "id": "kCygjUoUWLho"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "new=timestamps.drop('city')\n",
        "new\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8GQLexCCcwrx",
        "outputId": "012e316e-6e63-424f-c6c4-583cba5c2b6d"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['accept_time', 'time_window_start', 'time_window_end', 'pickup_time',\n",
              "       'pickup_gps_time', 'accept_gps_time'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#convert datetime columns to 'DateTime' Types\n",
        "for column in new:\n",
        "\n",
        "  df_filterd[column] = '2023-' + df_filterd[column].astype(str)\n",
        "  df_filterd[column] = pd.to_datetime(df_filterd[column],format = '%Y-%m-%d %H:%M:%S', errors='coerce')\n",
        "\n",
        "df_filterd.isnull().sum()\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "fs9Z6e28c5hx",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "b0a630bb-4161-4365-db74-9fae3100c3e8"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-32-507cc5b46cd0>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[column] = '2023-' + df_filterd[column].astype(str)\n",
            "<ipython-input-32-507cc5b46cd0>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[column] = pd.to_datetime(df_filterd[column],format = '%Y-%m-%d %H:%M:%S', errors='coerce')\n",
            "<ipython-input-32-507cc5b46cd0>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[column] = '2023-' + df_filterd[column].astype(str)\n",
            "<ipython-input-32-507cc5b46cd0>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[column] = pd.to_datetime(df_filterd[column],format = '%Y-%m-%d %H:%M:%S', errors='coerce')\n",
            "<ipython-input-32-507cc5b46cd0>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[column] = '2023-' + df_filterd[column].astype(str)\n",
            "<ipython-input-32-507cc5b46cd0>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[column] = pd.to_datetime(df_filterd[column],format = '%Y-%m-%d %H:%M:%S', errors='coerce')\n",
            "<ipython-input-32-507cc5b46cd0>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[column] = '2023-' + df_filterd[column].astype(str)\n",
            "<ipython-input-32-507cc5b46cd0>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[column] = pd.to_datetime(df_filterd[column],format = '%Y-%m-%d %H:%M:%S', errors='coerce')\n",
            "<ipython-input-32-507cc5b46cd0>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[column] = '2023-' + df_filterd[column].astype(str)\n",
            "<ipython-input-32-507cc5b46cd0>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[column] = pd.to_datetime(df_filterd[column],format = '%Y-%m-%d %H:%M:%S', errors='coerce')\n",
            "<ipython-input-32-507cc5b46cd0>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[column] = '2023-' + df_filterd[column].astype(str)\n",
            "<ipython-input-32-507cc5b46cd0>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[column] = pd.to_datetime(df_filterd[column],format = '%Y-%m-%d %H:%M:%S', errors='coerce')\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "order_id             0\n",
              "region_id            0\n",
              "city                 0\n",
              "courier_id           0\n",
              "accept_time          0\n",
              "time_window_start    0\n",
              "time_window_end      0\n",
              "lng                  0\n",
              "lat                  0\n",
              "aoi_id               0\n",
              "aoi_type             0\n",
              "pickup_time          0\n",
              "pickup_gps_time      0\n",
              "pickup_gps_lng       0\n",
              "pickup_gps_lat       0\n",
              "accept_gps_time      0\n",
              "accept_gps_lng       0\n",
              "accept_gps_lat       0\n",
              "ds                   0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>order_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>city</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>courier_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_time</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>time_window_start</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>time_window_end</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lng</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lat</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aoi_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aoi_type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_time</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_gps_time</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_gps_lng</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>pickup_gps_lat</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_time</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_lng</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_lat</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ds</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_filterd.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "M5hWYj8Gw-Lv",
        "outputId": "3385b251-eecd-41a7-9d5e-41e8572c4ff7"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    order_id  region_id       city  courier_id         accept_time  \\\n",
              "2    2301722          3  Chongqing        4706 2023-10-09 13:57:00   \n",
              "11    780972          3  Chongqing        4706 2023-05-22 10:22:00   \n",
              "26    283833          3  Chongqing        6693 2023-05-03 07:49:00   \n",
              "32   4315552          3  Chongqing         317 2023-06-06 10:49:00   \n",
              "33    728111          3  Chongqing         317 2023-05-21 09:06:00   \n",
              "\n",
              "     time_window_start     time_window_end        lng       lat  aoi_id  \\\n",
              "2  2023-10-09 13:57:00 2023-10-09 15:57:00  106.46869  29.47191     218   \n",
              "11 2023-05-22 10:22:00 2023-05-22 12:22:00  106.46875  29.47208     218   \n",
              "26 2023-05-03 17:00:00 2023-05-03 19:00:00  106.46863  29.47203     218   \n",
              "32 2023-06-06 11:00:00 2023-06-06 13:00:00  106.46861  29.48829     337   \n",
              "33 2023-05-21 11:00:00 2023-05-21 13:00:00  106.46772  29.48808     337   \n",
              "\n",
              "    aoi_type         pickup_time     pickup_gps_time  pickup_gps_lng  \\\n",
              "2         14 2023-10-09 15:53:00 2023-10-09 15:53:00       106.46821   \n",
              "11        14 2023-05-22 11:18:00 2023-05-22 11:17:00       106.46930   \n",
              "26        14 2023-05-03 18:44:00 2023-05-03 18:44:00       106.47037   \n",
              "32         1 2023-06-06 12:13:00 2023-06-06 12:13:00       106.46860   \n",
              "33         1 2023-05-21 14:36:00 2023-05-21 14:36:00       106.46918   \n",
              "\n",
              "    pickup_gps_lat     accept_gps_time  accept_gps_lng  accept_gps_lat      ds  \n",
              "2         29.46771 2023-10-09 13:56:00       106.46929        29.47231  1009.0  \n",
              "11        29.47238 2023-05-22 10:22:00       106.47907        29.43180   522.0  \n",
              "26        29.47237 2023-05-03 07:49:00       106.49162        29.43503   503.0  \n",
              "32        29.48788 2023-06-06 10:49:00       106.47521        29.48561   606.0  \n",
              "33        29.48724 2023-05-21 09:06:00       106.46635        29.49159   521.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-12705868-9d48-4701-a6a6-b03cc071f031\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>region_id</th>\n",
              "      <th>city</th>\n",
              "      <th>courier_id</th>\n",
              "      <th>accept_time</th>\n",
              "      <th>time_window_start</th>\n",
              "      <th>time_window_end</th>\n",
              "      <th>lng</th>\n",
              "      <th>lat</th>\n",
              "      <th>aoi_id</th>\n",
              "      <th>aoi_type</th>\n",
              "      <th>pickup_time</th>\n",
              "      <th>pickup_gps_time</th>\n",
              "      <th>pickup_gps_lng</th>\n",
              "      <th>pickup_gps_lat</th>\n",
              "      <th>accept_gps_time</th>\n",
              "      <th>accept_gps_lng</th>\n",
              "      <th>accept_gps_lat</th>\n",
              "      <th>ds</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2301722</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>4706</td>\n",
              "      <td>2023-10-09 13:57:00</td>\n",
              "      <td>2023-10-09 13:57:00</td>\n",
              "      <td>2023-10-09 15:57:00</td>\n",
              "      <td>106.46869</td>\n",
              "      <td>29.47191</td>\n",
              "      <td>218</td>\n",
              "      <td>14</td>\n",
              "      <td>2023-10-09 15:53:00</td>\n",
              "      <td>2023-10-09 15:53:00</td>\n",
              "      <td>106.46821</td>\n",
              "      <td>29.46771</td>\n",
              "      <td>2023-10-09 13:56:00</td>\n",
              "      <td>106.46929</td>\n",
              "      <td>29.47231</td>\n",
              "      <td>1009.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>780972</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>4706</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>2023-05-22 12:22:00</td>\n",
              "      <td>106.46875</td>\n",
              "      <td>29.47208</td>\n",
              "      <td>218</td>\n",
              "      <td>14</td>\n",
              "      <td>2023-05-22 11:18:00</td>\n",
              "      <td>2023-05-22 11:17:00</td>\n",
              "      <td>106.46930</td>\n",
              "      <td>29.47238</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>106.47907</td>\n",
              "      <td>29.43180</td>\n",
              "      <td>522.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>283833</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>6693</td>\n",
              "      <td>2023-05-03 07:49:00</td>\n",
              "      <td>2023-05-03 17:00:00</td>\n",
              "      <td>2023-05-03 19:00:00</td>\n",
              "      <td>106.46863</td>\n",
              "      <td>29.47203</td>\n",
              "      <td>218</td>\n",
              "      <td>14</td>\n",
              "      <td>2023-05-03 18:44:00</td>\n",
              "      <td>2023-05-03 18:44:00</td>\n",
              "      <td>106.47037</td>\n",
              "      <td>29.47237</td>\n",
              "      <td>2023-05-03 07:49:00</td>\n",
              "      <td>106.49162</td>\n",
              "      <td>29.43503</td>\n",
              "      <td>503.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>4315552</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>317</td>\n",
              "      <td>2023-06-06 10:49:00</td>\n",
              "      <td>2023-06-06 11:00:00</td>\n",
              "      <td>2023-06-06 13:00:00</td>\n",
              "      <td>106.46861</td>\n",
              "      <td>29.48829</td>\n",
              "      <td>337</td>\n",
              "      <td>1</td>\n",
              "      <td>2023-06-06 12:13:00</td>\n",
              "      <td>2023-06-06 12:13:00</td>\n",
              "      <td>106.46860</td>\n",
              "      <td>29.48788</td>\n",
              "      <td>2023-06-06 10:49:00</td>\n",
              "      <td>106.47521</td>\n",
              "      <td>29.48561</td>\n",
              "      <td>606.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>728111</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>317</td>\n",
              "      <td>2023-05-21 09:06:00</td>\n",
              "      <td>2023-05-21 11:00:00</td>\n",
              "      <td>2023-05-21 13:00:00</td>\n",
              "      <td>106.46772</td>\n",
              "      <td>29.48808</td>\n",
              "      <td>337</td>\n",
              "      <td>1</td>\n",
              "      <td>2023-05-21 14:36:00</td>\n",
              "      <td>2023-05-21 14:36:00</td>\n",
              "      <td>106.46918</td>\n",
              "      <td>29.48724</td>\n",
              "      <td>2023-05-21 09:06:00</td>\n",
              "      <td>106.46635</td>\n",
              "      <td>29.49159</td>\n",
              "      <td>521.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-12705868-9d48-4701-a6a6-b03cc071f031')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-12705868-9d48-4701-a6a6-b03cc071f031 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-12705868-9d48-4701-a6a6-b03cc071f031');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-dcf045aa-0557-439f-81d9-890c23a8c966\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-dcf045aa-0557-439f-81d9-890c23a8c966')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-dcf045aa-0557-439f-81d9-890c23a8c966 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_filterd"
            }
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#for col in new:\n",
        "#  df_filterd[col] = df_filterd[col].dt.hour\n"
      ],
      "metadata": {
        "id": "bBUFWlXYMmdO"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_filterd.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "YQZO-kncjs8T",
        "outputId": "ad561224-3560-4919-9cf4-f42792a5668c"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    order_id  region_id       city  courier_id         accept_time  \\\n",
              "2    2301722          3  Chongqing        4706 2023-10-09 13:57:00   \n",
              "11    780972          3  Chongqing        4706 2023-05-22 10:22:00   \n",
              "26    283833          3  Chongqing        6693 2023-05-03 07:49:00   \n",
              "32   4315552          3  Chongqing         317 2023-06-06 10:49:00   \n",
              "33    728111          3  Chongqing         317 2023-05-21 09:06:00   \n",
              "\n",
              "     time_window_start     time_window_end        lng       lat  aoi_id  \\\n",
              "2  2023-10-09 13:57:00 2023-10-09 15:57:00  106.46869  29.47191     218   \n",
              "11 2023-05-22 10:22:00 2023-05-22 12:22:00  106.46875  29.47208     218   \n",
              "26 2023-05-03 17:00:00 2023-05-03 19:00:00  106.46863  29.47203     218   \n",
              "32 2023-06-06 11:00:00 2023-06-06 13:00:00  106.46861  29.48829     337   \n",
              "33 2023-05-21 11:00:00 2023-05-21 13:00:00  106.46772  29.48808     337   \n",
              "\n",
              "    aoi_type         pickup_time     pickup_gps_time  pickup_gps_lng  \\\n",
              "2         14 2023-10-09 15:53:00 2023-10-09 15:53:00       106.46821   \n",
              "11        14 2023-05-22 11:18:00 2023-05-22 11:17:00       106.46930   \n",
              "26        14 2023-05-03 18:44:00 2023-05-03 18:44:00       106.47037   \n",
              "32         1 2023-06-06 12:13:00 2023-06-06 12:13:00       106.46860   \n",
              "33         1 2023-05-21 14:36:00 2023-05-21 14:36:00       106.46918   \n",
              "\n",
              "    pickup_gps_lat     accept_gps_time  accept_gps_lng  accept_gps_lat      ds  \n",
              "2         29.46771 2023-10-09 13:56:00       106.46929        29.47231  1009.0  \n",
              "11        29.47238 2023-05-22 10:22:00       106.47907        29.43180   522.0  \n",
              "26        29.47237 2023-05-03 07:49:00       106.49162        29.43503   503.0  \n",
              "32        29.48788 2023-06-06 10:49:00       106.47521        29.48561   606.0  \n",
              "33        29.48724 2023-05-21 09:06:00       106.46635        29.49159   521.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0b6bea99-c995-4fc4-88b6-d3c91e79fea7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>region_id</th>\n",
              "      <th>city</th>\n",
              "      <th>courier_id</th>\n",
              "      <th>accept_time</th>\n",
              "      <th>time_window_start</th>\n",
              "      <th>time_window_end</th>\n",
              "      <th>lng</th>\n",
              "      <th>lat</th>\n",
              "      <th>aoi_id</th>\n",
              "      <th>aoi_type</th>\n",
              "      <th>pickup_time</th>\n",
              "      <th>pickup_gps_time</th>\n",
              "      <th>pickup_gps_lng</th>\n",
              "      <th>pickup_gps_lat</th>\n",
              "      <th>accept_gps_time</th>\n",
              "      <th>accept_gps_lng</th>\n",
              "      <th>accept_gps_lat</th>\n",
              "      <th>ds</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2301722</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>4706</td>\n",
              "      <td>2023-10-09 13:57:00</td>\n",
              "      <td>2023-10-09 13:57:00</td>\n",
              "      <td>2023-10-09 15:57:00</td>\n",
              "      <td>106.46869</td>\n",
              "      <td>29.47191</td>\n",
              "      <td>218</td>\n",
              "      <td>14</td>\n",
              "      <td>2023-10-09 15:53:00</td>\n",
              "      <td>2023-10-09 15:53:00</td>\n",
              "      <td>106.46821</td>\n",
              "      <td>29.46771</td>\n",
              "      <td>2023-10-09 13:56:00</td>\n",
              "      <td>106.46929</td>\n",
              "      <td>29.47231</td>\n",
              "      <td>1009.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>780972</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>4706</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>2023-05-22 12:22:00</td>\n",
              "      <td>106.46875</td>\n",
              "      <td>29.47208</td>\n",
              "      <td>218</td>\n",
              "      <td>14</td>\n",
              "      <td>2023-05-22 11:18:00</td>\n",
              "      <td>2023-05-22 11:17:00</td>\n",
              "      <td>106.46930</td>\n",
              "      <td>29.47238</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>106.47907</td>\n",
              "      <td>29.43180</td>\n",
              "      <td>522.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>283833</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>6693</td>\n",
              "      <td>2023-05-03 07:49:00</td>\n",
              "      <td>2023-05-03 17:00:00</td>\n",
              "      <td>2023-05-03 19:00:00</td>\n",
              "      <td>106.46863</td>\n",
              "      <td>29.47203</td>\n",
              "      <td>218</td>\n",
              "      <td>14</td>\n",
              "      <td>2023-05-03 18:44:00</td>\n",
              "      <td>2023-05-03 18:44:00</td>\n",
              "      <td>106.47037</td>\n",
              "      <td>29.47237</td>\n",
              "      <td>2023-05-03 07:49:00</td>\n",
              "      <td>106.49162</td>\n",
              "      <td>29.43503</td>\n",
              "      <td>503.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>4315552</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>317</td>\n",
              "      <td>2023-06-06 10:49:00</td>\n",
              "      <td>2023-06-06 11:00:00</td>\n",
              "      <td>2023-06-06 13:00:00</td>\n",
              "      <td>106.46861</td>\n",
              "      <td>29.48829</td>\n",
              "      <td>337</td>\n",
              "      <td>1</td>\n",
              "      <td>2023-06-06 12:13:00</td>\n",
              "      <td>2023-06-06 12:13:00</td>\n",
              "      <td>106.46860</td>\n",
              "      <td>29.48788</td>\n",
              "      <td>2023-06-06 10:49:00</td>\n",
              "      <td>106.47521</td>\n",
              "      <td>29.48561</td>\n",
              "      <td>606.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>728111</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>317</td>\n",
              "      <td>2023-05-21 09:06:00</td>\n",
              "      <td>2023-05-21 11:00:00</td>\n",
              "      <td>2023-05-21 13:00:00</td>\n",
              "      <td>106.46772</td>\n",
              "      <td>29.48808</td>\n",
              "      <td>337</td>\n",
              "      <td>1</td>\n",
              "      <td>2023-05-21 14:36:00</td>\n",
              "      <td>2023-05-21 14:36:00</td>\n",
              "      <td>106.46918</td>\n",
              "      <td>29.48724</td>\n",
              "      <td>2023-05-21 09:06:00</td>\n",
              "      <td>106.46635</td>\n",
              "      <td>29.49159</td>\n",
              "      <td>521.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0b6bea99-c995-4fc4-88b6-d3c91e79fea7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0b6bea99-c995-4fc4-88b6-d3c91e79fea7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0b6bea99-c995-4fc4-88b6-d3c91e79fea7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d4cf3faf-0701-4bc2-8f72-b5f00a232999\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d4cf3faf-0701-4bc2-8f72-b5f00a232999')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d4cf3faf-0701-4bc2-8f72-b5f00a232999 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_filterd"
            }
          },
          "metadata": {},
          "execution_count": 35
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#extract hour,day,weekday,isweekend from timestamp columns\n",
        "for col in new:\n",
        "  df_filterd[col + 'hour'] = df_filterd[col].dt.hour\n",
        "  df_filterd[col + 'day'] = df_filterd[col].dt.day\n",
        "  df_filterd[col + 'weekday'] = df_filterd[col].dt.dayofweek\n",
        "  df_filterd[col + 'is_weekend'] = df_filterd[col + 'weekday'].apply(lambda day: 1 if day >= 5 else 0 )\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wx9Prp6ekKvw",
        "outputId": "82ff8cd8-f39c-4854-e9c7-63ab6845af66"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-36-f43dd1665a55>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'hour'] = df_filterd[col].dt.hour\n",
            "<ipython-input-36-f43dd1665a55>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'day'] = df_filterd[col].dt.day\n",
            "<ipython-input-36-f43dd1665a55>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'weekday'] = df_filterd[col].dt.dayofweek\n",
            "<ipython-input-36-f43dd1665a55>:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'is_weekend'] = df_filterd[col + 'weekday'].apply(lambda day: 1 if day >= 5 else 0 )\n",
            "<ipython-input-36-f43dd1665a55>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'hour'] = df_filterd[col].dt.hour\n",
            "<ipython-input-36-f43dd1665a55>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'day'] = df_filterd[col].dt.day\n",
            "<ipython-input-36-f43dd1665a55>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'weekday'] = df_filterd[col].dt.dayofweek\n",
            "<ipython-input-36-f43dd1665a55>:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'is_weekend'] = df_filterd[col + 'weekday'].apply(lambda day: 1 if day >= 5 else 0 )\n",
            "<ipython-input-36-f43dd1665a55>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'hour'] = df_filterd[col].dt.hour\n",
            "<ipython-input-36-f43dd1665a55>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'day'] = df_filterd[col].dt.day\n",
            "<ipython-input-36-f43dd1665a55>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'weekday'] = df_filterd[col].dt.dayofweek\n",
            "<ipython-input-36-f43dd1665a55>:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'is_weekend'] = df_filterd[col + 'weekday'].apply(lambda day: 1 if day >= 5 else 0 )\n",
            "<ipython-input-36-f43dd1665a55>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'hour'] = df_filterd[col].dt.hour\n",
            "<ipython-input-36-f43dd1665a55>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'day'] = df_filterd[col].dt.day\n",
            "<ipython-input-36-f43dd1665a55>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'weekday'] = df_filterd[col].dt.dayofweek\n",
            "<ipython-input-36-f43dd1665a55>:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'is_weekend'] = df_filterd[col + 'weekday'].apply(lambda day: 1 if day >= 5 else 0 )\n",
            "<ipython-input-36-f43dd1665a55>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'hour'] = df_filterd[col].dt.hour\n",
            "<ipython-input-36-f43dd1665a55>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'day'] = df_filterd[col].dt.day\n",
            "<ipython-input-36-f43dd1665a55>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'weekday'] = df_filterd[col].dt.dayofweek\n",
            "<ipython-input-36-f43dd1665a55>:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'is_weekend'] = df_filterd[col + 'weekday'].apply(lambda day: 1 if day >= 5 else 0 )\n",
            "<ipython-input-36-f43dd1665a55>:3: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'hour'] = df_filterd[col].dt.hour\n",
            "<ipython-input-36-f43dd1665a55>:4: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'day'] = df_filterd[col].dt.day\n",
            "<ipython-input-36-f43dd1665a55>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'weekday'] = df_filterd[col].dt.dayofweek\n",
            "<ipython-input-36-f43dd1665a55>:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd[col + 'is_weekend'] = df_filterd[col + 'weekday'].apply(lambda day: 1 if day >= 5 else 0 )\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_filterd.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "id": "2U661fQIDw0E",
        "outputId": "f1922dec-55ed-485f-bf56-644e1e1a6f4e"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    order_id  region_id       city  courier_id         accept_time  \\\n",
              "2    2301722          3  Chongqing        4706 2023-10-09 13:57:00   \n",
              "11    780972          3  Chongqing        4706 2023-05-22 10:22:00   \n",
              "26    283833          3  Chongqing        6693 2023-05-03 07:49:00   \n",
              "32   4315552          3  Chongqing         317 2023-06-06 10:49:00   \n",
              "33    728111          3  Chongqing         317 2023-05-21 09:06:00   \n",
              "\n",
              "     time_window_start     time_window_end        lng       lat  aoi_id  ...  \\\n",
              "2  2023-10-09 13:57:00 2023-10-09 15:57:00  106.46869  29.47191     218  ...   \n",
              "11 2023-05-22 10:22:00 2023-05-22 12:22:00  106.46875  29.47208     218  ...   \n",
              "26 2023-05-03 17:00:00 2023-05-03 19:00:00  106.46863  29.47203     218  ...   \n",
              "32 2023-06-06 11:00:00 2023-06-06 13:00:00  106.46861  29.48829     337  ...   \n",
              "33 2023-05-21 11:00:00 2023-05-21 13:00:00  106.46772  29.48808     337  ...   \n",
              "\n",
              "    pickup_timeweekday pickup_timeis_weekend pickup_gps_timehour  \\\n",
              "2                    0                     0                  15   \n",
              "11                   0                     0                  11   \n",
              "26                   2                     0                  18   \n",
              "32                   1                     0                  12   \n",
              "33                   6                     1                  14   \n",
              "\n",
              "    pickup_gps_timeday  pickup_gps_timeweekday pickup_gps_timeis_weekend  \\\n",
              "2                    9                       0                         0   \n",
              "11                  22                       0                         0   \n",
              "26                   3                       2                         0   \n",
              "32                   6                       1                         0   \n",
              "33                  21                       6                         1   \n",
              "\n",
              "    accept_gps_timehour  accept_gps_timeday  accept_gps_timeweekday  \\\n",
              "2                    13                   9                       0   \n",
              "11                   10                  22                       0   \n",
              "26                    7                   3                       2   \n",
              "32                   10                   6                       1   \n",
              "33                    9                  21                       6   \n",
              "\n",
              "    accept_gps_timeis_weekend  \n",
              "2                           0  \n",
              "11                          0  \n",
              "26                          0  \n",
              "32                          0  \n",
              "33                          1  \n",
              "\n",
              "[5 rows x 43 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-83cedbcc-f49b-4b92-84b8-842d268e1c85\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>region_id</th>\n",
              "      <th>city</th>\n",
              "      <th>courier_id</th>\n",
              "      <th>accept_time</th>\n",
              "      <th>time_window_start</th>\n",
              "      <th>time_window_end</th>\n",
              "      <th>lng</th>\n",
              "      <th>lat</th>\n",
              "      <th>aoi_id</th>\n",
              "      <th>...</th>\n",
              "      <th>pickup_timeweekday</th>\n",
              "      <th>pickup_timeis_weekend</th>\n",
              "      <th>pickup_gps_timehour</th>\n",
              "      <th>pickup_gps_timeday</th>\n",
              "      <th>pickup_gps_timeweekday</th>\n",
              "      <th>pickup_gps_timeis_weekend</th>\n",
              "      <th>accept_gps_timehour</th>\n",
              "      <th>accept_gps_timeday</th>\n",
              "      <th>accept_gps_timeweekday</th>\n",
              "      <th>accept_gps_timeis_weekend</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2301722</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>4706</td>\n",
              "      <td>2023-10-09 13:57:00</td>\n",
              "      <td>2023-10-09 13:57:00</td>\n",
              "      <td>2023-10-09 15:57:00</td>\n",
              "      <td>106.46869</td>\n",
              "      <td>29.47191</td>\n",
              "      <td>218</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>780972</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>4706</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>2023-05-22 12:22:00</td>\n",
              "      <td>106.46875</td>\n",
              "      <td>29.47208</td>\n",
              "      <td>218</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>283833</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>6693</td>\n",
              "      <td>2023-05-03 07:49:00</td>\n",
              "      <td>2023-05-03 17:00:00</td>\n",
              "      <td>2023-05-03 19:00:00</td>\n",
              "      <td>106.46863</td>\n",
              "      <td>29.47203</td>\n",
              "      <td>218</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>4315552</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>317</td>\n",
              "      <td>2023-06-06 10:49:00</td>\n",
              "      <td>2023-06-06 11:00:00</td>\n",
              "      <td>2023-06-06 13:00:00</td>\n",
              "      <td>106.46861</td>\n",
              "      <td>29.48829</td>\n",
              "      <td>337</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>728111</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>317</td>\n",
              "      <td>2023-05-21 09:06:00</td>\n",
              "      <td>2023-05-21 11:00:00</td>\n",
              "      <td>2023-05-21 13:00:00</td>\n",
              "      <td>106.46772</td>\n",
              "      <td>29.48808</td>\n",
              "      <td>337</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>14</td>\n",
              "      <td>21</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>21</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 43 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-83cedbcc-f49b-4b92-84b8-842d268e1c85')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-83cedbcc-f49b-4b92-84b8-842d268e1c85 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-83cedbcc-f49b-4b92-84b8-842d268e1c85');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5f6630cb-992e-41dd-ac3c-a757e0eeede2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5f6630cb-992e-41dd-ac3c-a757e0eeede2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5f6630cb-992e-41dd-ac3c-a757e0eeede2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_filterd"
            }
          },
          "metadata": {},
          "execution_count": 37
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_filterd[new].head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 313
        },
        "id": "6PcW9TwBEZNk",
        "outputId": "64b85042-9590-4392-e4bc-105e325a4243"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           accept_time   time_window_start     time_window_end  \\\n",
              "2  2023-10-09 13:57:00 2023-10-09 13:57:00 2023-10-09 15:57:00   \n",
              "11 2023-05-22 10:22:00 2023-05-22 10:22:00 2023-05-22 12:22:00   \n",
              "26 2023-05-03 07:49:00 2023-05-03 17:00:00 2023-05-03 19:00:00   \n",
              "32 2023-06-06 10:49:00 2023-06-06 11:00:00 2023-06-06 13:00:00   \n",
              "33 2023-05-21 09:06:00 2023-05-21 11:00:00 2023-05-21 13:00:00   \n",
              "\n",
              "           pickup_time     pickup_gps_time     accept_gps_time  \n",
              "2  2023-10-09 15:53:00 2023-10-09 15:53:00 2023-10-09 13:56:00  \n",
              "11 2023-05-22 11:18:00 2023-05-22 11:17:00 2023-05-22 10:22:00  \n",
              "26 2023-05-03 18:44:00 2023-05-03 18:44:00 2023-05-03 07:49:00  \n",
              "32 2023-06-06 12:13:00 2023-06-06 12:13:00 2023-06-06 10:49:00  \n",
              "33 2023-05-21 14:36:00 2023-05-21 14:36:00 2023-05-21 09:06:00  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-24e40574-0b55-4fa4-85ad-6b2fd245d3df\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>accept_time</th>\n",
              "      <th>time_window_start</th>\n",
              "      <th>time_window_end</th>\n",
              "      <th>pickup_time</th>\n",
              "      <th>pickup_gps_time</th>\n",
              "      <th>accept_gps_time</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2023-10-09 13:57:00</td>\n",
              "      <td>2023-10-09 13:57:00</td>\n",
              "      <td>2023-10-09 15:57:00</td>\n",
              "      <td>2023-10-09 15:53:00</td>\n",
              "      <td>2023-10-09 15:53:00</td>\n",
              "      <td>2023-10-09 13:56:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>2023-05-22 12:22:00</td>\n",
              "      <td>2023-05-22 11:18:00</td>\n",
              "      <td>2023-05-22 11:17:00</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>2023-05-03 07:49:00</td>\n",
              "      <td>2023-05-03 17:00:00</td>\n",
              "      <td>2023-05-03 19:00:00</td>\n",
              "      <td>2023-05-03 18:44:00</td>\n",
              "      <td>2023-05-03 18:44:00</td>\n",
              "      <td>2023-05-03 07:49:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>2023-06-06 10:49:00</td>\n",
              "      <td>2023-06-06 11:00:00</td>\n",
              "      <td>2023-06-06 13:00:00</td>\n",
              "      <td>2023-06-06 12:13:00</td>\n",
              "      <td>2023-06-06 12:13:00</td>\n",
              "      <td>2023-06-06 10:49:00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>2023-05-21 09:06:00</td>\n",
              "      <td>2023-05-21 11:00:00</td>\n",
              "      <td>2023-05-21 13:00:00</td>\n",
              "      <td>2023-05-21 14:36:00</td>\n",
              "      <td>2023-05-21 14:36:00</td>\n",
              "      <td>2023-05-21 09:06:00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-24e40574-0b55-4fa4-85ad-6b2fd245d3df')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-24e40574-0b55-4fa4-85ad-6b2fd245d3df button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-24e40574-0b55-4fa4-85ad-6b2fd245d3df');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-aa98f60b-9fda-4368-ac62-27af8354df1d\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aa98f60b-9fda-4368-ac62-27af8354df1d')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-aa98f60b-9fda-4368-ac62-27af8354df1d button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_filterd[new]\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"accept_time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-05-03 07:49:00\",\n        \"max\": \"2023-10-09 13:57:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2023-05-22 10:22:00\",\n          \"2023-05-21 09:06:00\",\n          \"2023-05-03 07:49:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time_window_start\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-05-03 17:00:00\",\n        \"max\": \"2023-10-09 13:57:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2023-05-22 10:22:00\",\n          \"2023-05-21 11:00:00\",\n          \"2023-05-03 17:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"time_window_end\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-05-03 19:00:00\",\n        \"max\": \"2023-10-09 15:57:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2023-05-22 12:22:00\",\n          \"2023-05-21 13:00:00\",\n          \"2023-05-03 19:00:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-05-03 18:44:00\",\n        \"max\": \"2023-10-09 15:53:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2023-05-22 11:18:00\",\n          \"2023-05-21 14:36:00\",\n          \"2023-05-03 18:44:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"pickup_gps_time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-05-03 18:44:00\",\n        \"max\": \"2023-10-09 15:53:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2023-05-22 11:17:00\",\n          \"2023-05-21 14:36:00\",\n          \"2023-05-03 18:44:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"accept_gps_time\",\n      \"properties\": {\n        \"dtype\": \"date\",\n        \"min\": \"2023-05-03 07:49:00\",\n        \"max\": \"2023-10-09 13:56:00\",\n        \"num_unique_values\": 5,\n        \"samples\": [\n          \"2023-05-22 10:22:00\",\n          \"2023-05-21 09:06:00\",\n          \"2023-05-03 07:49:00\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "UdbpStYWE6LO"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_filterd.head()"
      ],
      "metadata": {
        "id": "fC9Z03wcGhtO",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 342
        },
        "outputId": "a93eaec4-1fc6-4f06-d8b8-69c6d9e3a883"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    order_id  region_id       city  courier_id         accept_time  \\\n",
              "2    2301722          3  Chongqing        4706 2023-10-09 13:57:00   \n",
              "11    780972          3  Chongqing        4706 2023-05-22 10:22:00   \n",
              "26    283833          3  Chongqing        6693 2023-05-03 07:49:00   \n",
              "32   4315552          3  Chongqing         317 2023-06-06 10:49:00   \n",
              "33    728111          3  Chongqing         317 2023-05-21 09:06:00   \n",
              "\n",
              "     time_window_start     time_window_end        lng       lat  aoi_id  ...  \\\n",
              "2  2023-10-09 13:57:00 2023-10-09 15:57:00  106.46869  29.47191     218  ...   \n",
              "11 2023-05-22 10:22:00 2023-05-22 12:22:00  106.46875  29.47208     218  ...   \n",
              "26 2023-05-03 17:00:00 2023-05-03 19:00:00  106.46863  29.47203     218  ...   \n",
              "32 2023-06-06 11:00:00 2023-06-06 13:00:00  106.46861  29.48829     337  ...   \n",
              "33 2023-05-21 11:00:00 2023-05-21 13:00:00  106.46772  29.48808     337  ...   \n",
              "\n",
              "    pickup_timeweekday pickup_timeis_weekend pickup_gps_timehour  \\\n",
              "2                    0                     0                  15   \n",
              "11                   0                     0                  11   \n",
              "26                   2                     0                  18   \n",
              "32                   1                     0                  12   \n",
              "33                   6                     1                  14   \n",
              "\n",
              "    pickup_gps_timeday  pickup_gps_timeweekday pickup_gps_timeis_weekend  \\\n",
              "2                    9                       0                         0   \n",
              "11                  22                       0                         0   \n",
              "26                   3                       2                         0   \n",
              "32                   6                       1                         0   \n",
              "33                  21                       6                         1   \n",
              "\n",
              "    accept_gps_timehour  accept_gps_timeday  accept_gps_timeweekday  \\\n",
              "2                    13                   9                       0   \n",
              "11                   10                  22                       0   \n",
              "26                    7                   3                       2   \n",
              "32                   10                   6                       1   \n",
              "33                    9                  21                       6   \n",
              "\n",
              "    accept_gps_timeis_weekend  \n",
              "2                           0  \n",
              "11                          0  \n",
              "26                          0  \n",
              "32                          0  \n",
              "33                          1  \n",
              "\n",
              "[5 rows x 43 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-19e06b14-b106-458b-b4ad-ec8977296d61\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>region_id</th>\n",
              "      <th>city</th>\n",
              "      <th>courier_id</th>\n",
              "      <th>accept_time</th>\n",
              "      <th>time_window_start</th>\n",
              "      <th>time_window_end</th>\n",
              "      <th>lng</th>\n",
              "      <th>lat</th>\n",
              "      <th>aoi_id</th>\n",
              "      <th>...</th>\n",
              "      <th>pickup_timeweekday</th>\n",
              "      <th>pickup_timeis_weekend</th>\n",
              "      <th>pickup_gps_timehour</th>\n",
              "      <th>pickup_gps_timeday</th>\n",
              "      <th>pickup_gps_timeweekday</th>\n",
              "      <th>pickup_gps_timeis_weekend</th>\n",
              "      <th>accept_gps_timehour</th>\n",
              "      <th>accept_gps_timeday</th>\n",
              "      <th>accept_gps_timeweekday</th>\n",
              "      <th>accept_gps_timeis_weekend</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2301722</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>4706</td>\n",
              "      <td>2023-10-09 13:57:00</td>\n",
              "      <td>2023-10-09 13:57:00</td>\n",
              "      <td>2023-10-09 15:57:00</td>\n",
              "      <td>106.46869</td>\n",
              "      <td>29.47191</td>\n",
              "      <td>218</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>15</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>13</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>780972</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>4706</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>2023-05-22 12:22:00</td>\n",
              "      <td>106.46875</td>\n",
              "      <td>29.47208</td>\n",
              "      <td>218</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>11</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>283833</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>6693</td>\n",
              "      <td>2023-05-03 07:49:00</td>\n",
              "      <td>2023-05-03 17:00:00</td>\n",
              "      <td>2023-05-03 19:00:00</td>\n",
              "      <td>106.46863</td>\n",
              "      <td>29.47203</td>\n",
              "      <td>218</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>18</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>4315552</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>317</td>\n",
              "      <td>2023-06-06 10:49:00</td>\n",
              "      <td>2023-06-06 11:00:00</td>\n",
              "      <td>2023-06-06 13:00:00</td>\n",
              "      <td>106.46861</td>\n",
              "      <td>29.48829</td>\n",
              "      <td>337</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>12</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>728111</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>317</td>\n",
              "      <td>2023-05-21 09:06:00</td>\n",
              "      <td>2023-05-21 11:00:00</td>\n",
              "      <td>2023-05-21 13:00:00</td>\n",
              "      <td>106.46772</td>\n",
              "      <td>29.48808</td>\n",
              "      <td>337</td>\n",
              "      <td>...</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>14</td>\n",
              "      <td>21</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>21</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 43 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19e06b14-b106-458b-b4ad-ec8977296d61')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-19e06b14-b106-458b-b4ad-ec8977296d61 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-19e06b14-b106-458b-b4ad-ec8977296d61');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-cf92d163-0946-42e7-b8a8-bf83665138ed\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-cf92d163-0946-42e7-b8a8-bf83665138ed')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-cf92d163-0946-42e7-b8a8-bf83665138ed button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_filterd"
            }
          },
          "metadata": {},
          "execution_count": 39
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_filterd.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 453
        },
        "id": "OOGZ5J6DjRJM",
        "outputId": "6bbc76b8-d9b9-4207-f282-e8801177794c"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           order_id     region_id    courier_id  \\\n",
              "count  2.965386e+06  2.965386e+06  2.965386e+06   \n",
              "mean   3.091233e+06  6.525380e+01  7.864479e+03   \n",
              "min    1.000000e+00  0.000000e+00  4.000000e+00   \n",
              "25%    1.561454e+06  3.200000e+01  4.010000e+03   \n",
              "50%    3.094526e+06  6.700000e+01  7.818000e+03   \n",
              "75%    4.627494e+06  1.010000e+02  1.169900e+04   \n",
              "max    6.161997e+06  1.340000e+02  1.605600e+04   \n",
              "std    1.775655e+06  3.965331e+01  4.564156e+03   \n",
              "\n",
              "                         accept_time              time_window_start  \\\n",
              "count                        2965386                        2965386   \n",
              "mean   2023-07-31 20:40:38.404168448  2023-07-31 22:43:55.862521856   \n",
              "min              2023-05-01 06:24:00            2023-05-01 07:37:00   \n",
              "25%              2023-06-21 14:56:00            2023-06-21 17:00:00   \n",
              "50%              2023-07-27 08:56:00            2023-07-27 11:00:00   \n",
              "75%              2023-09-12 08:15:00            2023-09-12 09:00:00   \n",
              "max              2023-10-31 17:33:00            2023-11-02 17:00:00   \n",
              "std                              NaN                            NaN   \n",
              "\n",
              "                     time_window_end           lng           lat  \\\n",
              "count                        2965386  2.965386e+06  2.965386e+06   \n",
              "mean   2023-08-01 00:47:53.750976768  1.185309e+02  3.281640e+01   \n",
              "min              2023-05-01 10:00:00  1.053727e+02  2.891105e+01   \n",
              "25%              2023-06-21 19:00:00  1.199507e+02  3.021075e+01   \n",
              "50%              2023-07-27 13:00:00  1.203989e+02  3.117549e+01   \n",
              "75%              2023-09-12 11:00:00  1.214421e+02  3.732893e+01   \n",
              "max              2023-11-02 19:00:00  1.303666e+02  4.442747e+01   \n",
              "std                              NaN  5.773962e+00  3.993069e+00   \n",
              "\n",
              "             aoi_id      aoi_type  ... pickup_timeweekday  \\\n",
              "count  2.965386e+06  2.965386e+06  ...       2.965386e+06   \n",
              "mean   1.217325e+04  5.117732e+00  ...       2.948056e+00   \n",
              "min    0.000000e+00  0.000000e+00  ...       0.000000e+00   \n",
              "25%    5.934000e+03  1.000000e+00  ...       1.000000e+00   \n",
              "50%    1.214900e+04  1.000000e+00  ...       3.000000e+00   \n",
              "75%    1.820100e+04  1.400000e+01  ...       5.000000e+00   \n",
              "max    2.454300e+04  1.400000e+01  ...       6.000000e+00   \n",
              "std    7.112032e+03  5.879222e+00  ...       2.039383e+00   \n",
              "\n",
              "      pickup_timeis_weekend  pickup_gps_timehour  pickup_gps_timeday  \\\n",
              "count          2.965386e+06         2.965386e+06        2.965386e+06   \n",
              "mean           2.849471e-01         1.226708e+01        1.596910e+01   \n",
              "min            0.000000e+00         0.000000e+00        1.000000e+00   \n",
              "25%            0.000000e+00         1.000000e+01        9.000000e+00   \n",
              "50%            0.000000e+00         1.200000e+01        1.600000e+01   \n",
              "75%            1.000000e+00         1.500000e+01        2.300000e+01   \n",
              "max            1.000000e+00         2.300000e+01        3.100000e+01   \n",
              "std            4.513893e-01         2.928887e+00        8.650657e+00   \n",
              "\n",
              "      pickup_gps_timeweekday  pickup_gps_timeis_weekend  accept_gps_timehour  \\\n",
              "count           2.965386e+06               2.965386e+06         2.965386e+06   \n",
              "mean            2.948056e+00               2.849471e-01         9.928433e+00   \n",
              "min             0.000000e+00               0.000000e+00         0.000000e+00   \n",
              "25%             1.000000e+00               0.000000e+00         8.000000e+00   \n",
              "50%             3.000000e+00               0.000000e+00         9.000000e+00   \n",
              "75%             5.000000e+00               1.000000e+00         1.200000e+01   \n",
              "max             6.000000e+00               1.000000e+00         2.100000e+01   \n",
              "std             2.039383e+00               4.513893e-01         2.729964e+00   \n",
              "\n",
              "       accept_gps_timeday  accept_gps_timeweekday  accept_gps_timeis_weekend  \n",
              "count        2.965386e+06            2.965386e+06               2.965386e+06  \n",
              "mean         1.596910e+01            2.948056e+00               2.849471e-01  \n",
              "min          1.000000e+00            0.000000e+00               0.000000e+00  \n",
              "25%          9.000000e+00            1.000000e+00               0.000000e+00  \n",
              "50%          1.600000e+01            3.000000e+00               0.000000e+00  \n",
              "75%          2.300000e+01            5.000000e+00               1.000000e+00  \n",
              "max          3.100000e+01            6.000000e+00               1.000000e+00  \n",
              "std          8.650657e+00            2.039383e+00               4.513893e-01  \n",
              "\n",
              "[8 rows x 42 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c26ec7d3-5bcd-423c-96f8-81b95a51ace9\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>region_id</th>\n",
              "      <th>courier_id</th>\n",
              "      <th>accept_time</th>\n",
              "      <th>time_window_start</th>\n",
              "      <th>time_window_end</th>\n",
              "      <th>lng</th>\n",
              "      <th>lat</th>\n",
              "      <th>aoi_id</th>\n",
              "      <th>aoi_type</th>\n",
              "      <th>...</th>\n",
              "      <th>pickup_timeweekday</th>\n",
              "      <th>pickup_timeis_weekend</th>\n",
              "      <th>pickup_gps_timehour</th>\n",
              "      <th>pickup_gps_timeday</th>\n",
              "      <th>pickup_gps_timeweekday</th>\n",
              "      <th>pickup_gps_timeis_weekend</th>\n",
              "      <th>accept_gps_timehour</th>\n",
              "      <th>accept_gps_timeday</th>\n",
              "      <th>accept_gps_timeweekday</th>\n",
              "      <th>accept_gps_timeis_weekend</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2965386</td>\n",
              "      <td>2965386</td>\n",
              "      <td>2965386</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>...</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "      <td>2.965386e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>3.091233e+06</td>\n",
              "      <td>6.525380e+01</td>\n",
              "      <td>7.864479e+03</td>\n",
              "      <td>2023-07-31 20:40:38.404168448</td>\n",
              "      <td>2023-07-31 22:43:55.862521856</td>\n",
              "      <td>2023-08-01 00:47:53.750976768</td>\n",
              "      <td>1.185309e+02</td>\n",
              "      <td>3.281640e+01</td>\n",
              "      <td>1.217325e+04</td>\n",
              "      <td>5.117732e+00</td>\n",
              "      <td>...</td>\n",
              "      <td>2.948056e+00</td>\n",
              "      <td>2.849471e-01</td>\n",
              "      <td>1.226708e+01</td>\n",
              "      <td>1.596910e+01</td>\n",
              "      <td>2.948056e+00</td>\n",
              "      <td>2.849471e-01</td>\n",
              "      <td>9.928433e+00</td>\n",
              "      <td>1.596910e+01</td>\n",
              "      <td>2.948056e+00</td>\n",
              "      <td>2.849471e-01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>4.000000e+00</td>\n",
              "      <td>2023-05-01 06:24:00</td>\n",
              "      <td>2023-05-01 07:37:00</td>\n",
              "      <td>2023-05-01 10:00:00</td>\n",
              "      <td>1.053727e+02</td>\n",
              "      <td>2.891105e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>...</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>1.561454e+06</td>\n",
              "      <td>3.200000e+01</td>\n",
              "      <td>4.010000e+03</td>\n",
              "      <td>2023-06-21 14:56:00</td>\n",
              "      <td>2023-06-21 17:00:00</td>\n",
              "      <td>2023-06-21 19:00:00</td>\n",
              "      <td>1.199507e+02</td>\n",
              "      <td>3.021075e+01</td>\n",
              "      <td>5.934000e+03</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>...</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1.000000e+01</td>\n",
              "      <td>9.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>8.000000e+00</td>\n",
              "      <td>9.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>3.094526e+06</td>\n",
              "      <td>6.700000e+01</td>\n",
              "      <td>7.818000e+03</td>\n",
              "      <td>2023-07-27 08:56:00</td>\n",
              "      <td>2023-07-27 11:00:00</td>\n",
              "      <td>2023-07-27 13:00:00</td>\n",
              "      <td>1.203989e+02</td>\n",
              "      <td>3.117549e+01</td>\n",
              "      <td>1.214900e+04</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>...</td>\n",
              "      <td>3.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1.200000e+01</td>\n",
              "      <td>1.600000e+01</td>\n",
              "      <td>3.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>9.000000e+00</td>\n",
              "      <td>1.600000e+01</td>\n",
              "      <td>3.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>4.627494e+06</td>\n",
              "      <td>1.010000e+02</td>\n",
              "      <td>1.169900e+04</td>\n",
              "      <td>2023-09-12 08:15:00</td>\n",
              "      <td>2023-09-12 09:00:00</td>\n",
              "      <td>2023-09-12 11:00:00</td>\n",
              "      <td>1.214421e+02</td>\n",
              "      <td>3.732893e+01</td>\n",
              "      <td>1.820100e+04</td>\n",
              "      <td>1.400000e+01</td>\n",
              "      <td>...</td>\n",
              "      <td>5.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.500000e+01</td>\n",
              "      <td>2.300000e+01</td>\n",
              "      <td>5.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.200000e+01</td>\n",
              "      <td>2.300000e+01</td>\n",
              "      <td>5.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>6.161997e+06</td>\n",
              "      <td>1.340000e+02</td>\n",
              "      <td>1.605600e+04</td>\n",
              "      <td>2023-10-31 17:33:00</td>\n",
              "      <td>2023-11-02 17:00:00</td>\n",
              "      <td>2023-11-02 19:00:00</td>\n",
              "      <td>1.303666e+02</td>\n",
              "      <td>4.442747e+01</td>\n",
              "      <td>2.454300e+04</td>\n",
              "      <td>1.400000e+01</td>\n",
              "      <td>...</td>\n",
              "      <td>6.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>2.300000e+01</td>\n",
              "      <td>3.100000e+01</td>\n",
              "      <td>6.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>2.100000e+01</td>\n",
              "      <td>3.100000e+01</td>\n",
              "      <td>6.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.775655e+06</td>\n",
              "      <td>3.965331e+01</td>\n",
              "      <td>4.564156e+03</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>5.773962e+00</td>\n",
              "      <td>3.993069e+00</td>\n",
              "      <td>7.112032e+03</td>\n",
              "      <td>5.879222e+00</td>\n",
              "      <td>...</td>\n",
              "      <td>2.039383e+00</td>\n",
              "      <td>4.513893e-01</td>\n",
              "      <td>2.928887e+00</td>\n",
              "      <td>8.650657e+00</td>\n",
              "      <td>2.039383e+00</td>\n",
              "      <td>4.513893e-01</td>\n",
              "      <td>2.729964e+00</td>\n",
              "      <td>8.650657e+00</td>\n",
              "      <td>2.039383e+00</td>\n",
              "      <td>4.513893e-01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8 rows × 42 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c26ec7d3-5bcd-423c-96f8-81b95a51ace9')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c26ec7d3-5bcd-423c-96f8-81b95a51ace9 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c26ec7d3-5bcd-423c-96f8-81b95a51ace9');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-62800f04-1d80-4a2a-8602-cea24c31682f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-62800f04-1d80-4a2a-8602-cea24c31682f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-62800f04-1d80-4a2a-8602-cea24c31682f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe"
            }
          },
          "metadata": {},
          "execution_count": 40
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#normlize latitude and langitude columns\n",
        "\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "lat_lnd_data = df_filterd[['lat','lng','accept_gps_lng', 'accept_gps_lat']]\n",
        "\n",
        "scaled_lat_lng = scaler.fit_transform(lat_lnd_data)\n",
        "\n",
        "df_filterd['scaled_lat'] = scaled_lat_lng[:,0]\n",
        "df_filterd['scaled_lng'] = scaled_lat_lng[:,1]\n",
        "df_filterd['scaled_accept_lat'] = scaled_lat_lng[:,2]\n",
        "df_filterd['scaled_accept_lng'] = scaled_lat_lng[:,3]\n",
        "\n",
        "df_filterd.drop(['lat','lng','accept_gps_lng', 'accept_gps_lat'],axis=1,inplace=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m_hS88LGgAsc",
        "outputId": "c596ab4d-1b5c-41c9-ebf5-2a62fde7dc89"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-41-052df0b0812d>:10: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd['scaled_lat'] = scaled_lat_lng[:,0]\n",
            "<ipython-input-41-052df0b0812d>:11: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd['scaled_lng'] = scaled_lat_lng[:,1]\n",
            "<ipython-input-41-052df0b0812d>:12: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd['scaled_accept_lat'] = scaled_lat_lng[:,2]\n",
            "<ipython-input-41-052df0b0812d>:13: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd['scaled_accept_lng'] = scaled_lat_lng[:,3]\n",
            "<ipython-input-41-052df0b0812d>:15: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd.drop(['lat','lng','accept_gps_lng', 'accept_gps_lat'],axis=1,inplace=True)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_filterd.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FM2WrxR-TAp7",
        "outputId": "451139ee-5d49-486b-cb59-96b92f869084"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['order_id', 'region_id', 'city', 'courier_id', 'accept_time',\n",
              "       'time_window_start', 'time_window_end', 'aoi_id', 'aoi_type',\n",
              "       'pickup_time', 'pickup_gps_time', 'pickup_gps_lng', 'pickup_gps_lat',\n",
              "       'accept_gps_time', 'ds', 'accept_timehour', 'accept_timeday',\n",
              "       'accept_timeweekday', 'accept_timeis_weekend', 'time_window_starthour',\n",
              "       'time_window_startday', 'time_window_startweekday',\n",
              "       'time_window_startis_weekend', 'time_window_endhour',\n",
              "       'time_window_endday', 'time_window_endweekday',\n",
              "       'time_window_endis_weekend', 'pickup_timehour', 'pickup_timeday',\n",
              "       'pickup_timeweekday', 'pickup_timeis_weekend', 'pickup_gps_timehour',\n",
              "       'pickup_gps_timeday', 'pickup_gps_timeweekday',\n",
              "       'pickup_gps_timeis_weekend', 'accept_gps_timehour',\n",
              "       'accept_gps_timeday', 'accept_gps_timeweekday',\n",
              "       'accept_gps_timeis_weekend', 'scaled_lat', 'scaled_lng',\n",
              "       'scaled_accept_lat', 'scaled_accept_lng'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#calculate target variable ETA\n",
        "df_filterd['ETA_pickup'] = df_filterd['pickup_time'] - df_filterd['accept_time']\n",
        "df_filterd['ETA_pickup_hours'] = df_filterd['ETA_pickup'].dt.total_seconds() / 3600\n",
        "df_filterd.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 561
        },
        "id": "4Xer2J0uiZIS",
        "outputId": "21e652a7-db00-414f-b335-a45ab5d449fd"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-66-f2d5ed6ecfb1>:1: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd['ETA_pickup'] = df_filterd['pickup_time'] - df_filterd['accept_time']\n",
            "<ipython-input-66-f2d5ed6ecfb1>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_filterd['ETA_pickup_hours'] = df_filterd['ETA_pickup'].dt.total_seconds() / 3600\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    order_id  region_id       city  courier_id         accept_time  \\\n",
              "2    2301722          3  Chongqing        4706 2023-10-09 13:57:00   \n",
              "11    780972          3  Chongqing        4706 2023-05-22 10:22:00   \n",
              "26    283833          3  Chongqing        6693 2023-05-03 07:49:00   \n",
              "32   4315552          3  Chongqing         317 2023-06-06 10:49:00   \n",
              "33    728111          3  Chongqing         317 2023-05-21 09:06:00   \n",
              "\n",
              "     time_window_start     time_window_end  aoi_id  aoi_type  \\\n",
              "2  2023-10-09 13:57:00 2023-10-09 15:57:00     218        14   \n",
              "11 2023-05-22 10:22:00 2023-05-22 12:22:00     218        14   \n",
              "26 2023-05-03 17:00:00 2023-05-03 19:00:00     218        14   \n",
              "32 2023-06-06 11:00:00 2023-06-06 13:00:00     337         1   \n",
              "33 2023-05-21 11:00:00 2023-05-21 13:00:00     337         1   \n",
              "\n",
              "           pickup_time  ... accept_gps_timehour  accept_gps_timeday  \\\n",
              "2  2023-10-09 15:53:00  ...                  13                   9   \n",
              "11 2023-05-22 11:18:00  ...                  10                  22   \n",
              "26 2023-05-03 18:44:00  ...                   7                   3   \n",
              "32 2023-06-06 12:13:00  ...                  10                   6   \n",
              "33 2023-05-21 14:36:00  ...                   9                  21   \n",
              "\n",
              "    accept_gps_timeweekday accept_gps_timeis_weekend  scaled_lat  scaled_lng  \\\n",
              "2                        0                         0   -0.837573   -2.089074   \n",
              "11                       0                         0   -0.837531   -2.089064   \n",
              "26                       2                         0   -0.837543   -2.089085   \n",
              "32                       1                         0   -0.833471   -2.089088   \n",
              "33                       6                         1   -0.833524   -2.089242   \n",
              "\n",
              "    scaled_accept_lat  scaled_accept_lng      ETA_pickup  ETA_pickup_hours  \n",
              "2           -2.089315          -0.837549 0 days 01:56:00          1.933333  \n",
              "11          -2.087621          -0.847696 0 days 00:56:00          0.933333  \n",
              "26          -2.085447          -0.846887 0 days 10:55:00         10.916667  \n",
              "32          -2.088290          -0.834218 0 days 01:24:00          1.400000  \n",
              "33          -2.089824          -0.832721 0 days 05:30:00          5.500000  \n",
              "\n",
              "[5 rows x 45 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-85afb261-9f01-4007-8715-89fa20e7e652\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>region_id</th>\n",
              "      <th>city</th>\n",
              "      <th>courier_id</th>\n",
              "      <th>accept_time</th>\n",
              "      <th>time_window_start</th>\n",
              "      <th>time_window_end</th>\n",
              "      <th>aoi_id</th>\n",
              "      <th>aoi_type</th>\n",
              "      <th>pickup_time</th>\n",
              "      <th>...</th>\n",
              "      <th>accept_gps_timehour</th>\n",
              "      <th>accept_gps_timeday</th>\n",
              "      <th>accept_gps_timeweekday</th>\n",
              "      <th>accept_gps_timeis_weekend</th>\n",
              "      <th>scaled_lat</th>\n",
              "      <th>scaled_lng</th>\n",
              "      <th>scaled_accept_lat</th>\n",
              "      <th>scaled_accept_lng</th>\n",
              "      <th>ETA_pickup</th>\n",
              "      <th>ETA_pickup_hours</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2301722</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>4706</td>\n",
              "      <td>2023-10-09 13:57:00</td>\n",
              "      <td>2023-10-09 13:57:00</td>\n",
              "      <td>2023-10-09 15:57:00</td>\n",
              "      <td>218</td>\n",
              "      <td>14</td>\n",
              "      <td>2023-10-09 15:53:00</td>\n",
              "      <td>...</td>\n",
              "      <td>13</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.837573</td>\n",
              "      <td>-2.089074</td>\n",
              "      <td>-2.089315</td>\n",
              "      <td>-0.837549</td>\n",
              "      <td>0 days 01:56:00</td>\n",
              "      <td>1.933333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>780972</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>4706</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>2023-05-22 10:22:00</td>\n",
              "      <td>2023-05-22 12:22:00</td>\n",
              "      <td>218</td>\n",
              "      <td>14</td>\n",
              "      <td>2023-05-22 11:18:00</td>\n",
              "      <td>...</td>\n",
              "      <td>10</td>\n",
              "      <td>22</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.837531</td>\n",
              "      <td>-2.089064</td>\n",
              "      <td>-2.087621</td>\n",
              "      <td>-0.847696</td>\n",
              "      <td>0 days 00:56:00</td>\n",
              "      <td>0.933333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>283833</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>6693</td>\n",
              "      <td>2023-05-03 07:49:00</td>\n",
              "      <td>2023-05-03 17:00:00</td>\n",
              "      <td>2023-05-03 19:00:00</td>\n",
              "      <td>218</td>\n",
              "      <td>14</td>\n",
              "      <td>2023-05-03 18:44:00</td>\n",
              "      <td>...</td>\n",
              "      <td>7</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.837543</td>\n",
              "      <td>-2.089085</td>\n",
              "      <td>-2.085447</td>\n",
              "      <td>-0.846887</td>\n",
              "      <td>0 days 10:55:00</td>\n",
              "      <td>10.916667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>4315552</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>317</td>\n",
              "      <td>2023-06-06 10:49:00</td>\n",
              "      <td>2023-06-06 11:00:00</td>\n",
              "      <td>2023-06-06 13:00:00</td>\n",
              "      <td>337</td>\n",
              "      <td>1</td>\n",
              "      <td>2023-06-06 12:13:00</td>\n",
              "      <td>...</td>\n",
              "      <td>10</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>-0.833471</td>\n",
              "      <td>-2.089088</td>\n",
              "      <td>-2.088290</td>\n",
              "      <td>-0.834218</td>\n",
              "      <td>0 days 01:24:00</td>\n",
              "      <td>1.400000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>728111</td>\n",
              "      <td>3</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>317</td>\n",
              "      <td>2023-05-21 09:06:00</td>\n",
              "      <td>2023-05-21 11:00:00</td>\n",
              "      <td>2023-05-21 13:00:00</td>\n",
              "      <td>337</td>\n",
              "      <td>1</td>\n",
              "      <td>2023-05-21 14:36:00</td>\n",
              "      <td>...</td>\n",
              "      <td>9</td>\n",
              "      <td>21</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>-0.833524</td>\n",
              "      <td>-2.089242</td>\n",
              "      <td>-2.089824</td>\n",
              "      <td>-0.832721</td>\n",
              "      <td>0 days 05:30:00</td>\n",
              "      <td>5.500000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 45 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-85afb261-9f01-4007-8715-89fa20e7e652')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-85afb261-9f01-4007-8715-89fa20e7e652 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-85afb261-9f01-4007-8715-89fa20e7e652');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-7577a1a0-5b8c-4358-9d7a-439bebb65ca7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7577a1a0-5b8c-4358-9d7a-439bebb65ca7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-7577a1a0-5b8c-4358-9d7a-439bebb65ca7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df_filterd"
            }
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#import delivery dataset\n",
        "import pandas as pd\n",
        "del1 = pd.read_csv('/content/drive/MyDrive/delivery_data/delivery_cq.csv')"
      ],
      "metadata": {
        "id": "gKCjoOB0icMJ"
      },
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "HoHUDg7efXjp"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "del2 = pd.read_csv('/content/drive/MyDrive/delivery_data/delivery_delivery_jl.csv')"
      ],
      "metadata": {
        "id": "Xy7_MpQOitKH"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "del3 = pd.read_csv('/content/drive/MyDrive/delivery_data/delivery_hz.csv')\n"
      ],
      "metadata": {
        "id": "eWyHLMujtDqr"
      },
      "execution_count": 46,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "del4 = pd.read_csv('/content/drive/MyDrive/delivery_data/delivery_sh.csv')"
      ],
      "metadata": {
        "id": "82PgEkwPtbFA"
      },
      "execution_count": 47,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "del5 = pd.read_csv('/content/drive/MyDrive/delivery_data/delivery_yt.csv')"
      ],
      "metadata": {
        "id": "DLx5hMMFtlrC"
      },
      "execution_count": 48,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#merging all city delivery data\n",
        "del_df = pd.concat([del1, del2, del3, del4, del5],ignore_index=True)\n",
        "del_df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AzNCQ80QtsfQ",
        "outputId": "5c2d3820-fe6c-4278-bc39-9c6d017e6a6e"
      },
      "execution_count": 49,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 3181803 entries, 0 to 3181802\n",
            "Data columns (total 17 columns):\n",
            " #   Column             Dtype  \n",
            "---  ------             -----  \n",
            " 0   order_id           int64  \n",
            " 1   region_id          int64  \n",
            " 2   city               object \n",
            " 3   courier_id         float64\n",
            " 4   lng                float64\n",
            " 5   lat                float64\n",
            " 6   aoi_id             float64\n",
            " 7   aoi_type           float64\n",
            " 8   accept_time        object \n",
            " 9   accept_gps_time    object \n",
            " 10  accept_gps_lng     float64\n",
            " 11  accept_gps_lat     float64\n",
            " 12  delivery_time      object \n",
            " 13  delivery_gps_time  object \n",
            " 14  delivery_gps_lng   float64\n",
            " 15  delivery_gps_lat   float64\n",
            " 16  ds                 float64\n",
            "dtypes: float64(10), int64(2), object(5)\n",
            "memory usage: 412.7+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "del_df.isnull().sum()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "pv9m6laWtwQd",
        "outputId": "c2b302b0-8055-4733-a208-e9b67192e044"
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "order_id                0\n",
              "region_id               0\n",
              "city                    0\n",
              "courier_id              1\n",
              "lng                     1\n",
              "lat                     2\n",
              "aoi_id                  2\n",
              "aoi_type                2\n",
              "accept_time             2\n",
              "accept_gps_time         2\n",
              "accept_gps_lng       3379\n",
              "accept_gps_lat       3379\n",
              "delivery_time           2\n",
              "delivery_gps_time       2\n",
              "delivery_gps_lng        2\n",
              "delivery_gps_lat        2\n",
              "ds                      2\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>order_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>city</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>courier_id</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lng</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lat</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aoi_id</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aoi_type</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_time</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_time</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_lng</th>\n",
              "      <td>3379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_lat</th>\n",
              "      <td>3379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delivery_time</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delivery_gps_time</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delivery_gps_lng</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delivery_gps_lat</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ds</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#remove duplicates values and checking missing values and thier percentages\n",
        "del_df = del_df.drop_duplicates()\n",
        "missing_value_counts = del_df.isnull().sum()\n",
        "missing_Percentage = (missing_value_counts / len(del_df)) * 100\n",
        "missing_Percentage\n",
        "del_df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "id": "ctCuP8q9vASO",
        "outputId": "dcd7a2c4-2509-46ce-e554-3c3c1e6d4279"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "order_id                0\n",
              "region_id               0\n",
              "city                    0\n",
              "courier_id              1\n",
              "lng                     1\n",
              "lat                     2\n",
              "aoi_id                  2\n",
              "aoi_type                2\n",
              "accept_time             2\n",
              "accept_gps_time         2\n",
              "accept_gps_lng       3379\n",
              "accept_gps_lat       3379\n",
              "delivery_time           2\n",
              "delivery_gps_time       2\n",
              "delivery_gps_lng        2\n",
              "delivery_gps_lat        2\n",
              "ds                      2\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>order_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>city</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>courier_id</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lng</th>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lat</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aoi_id</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aoi_type</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_time</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_time</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_lng</th>\n",
              "      <td>3379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_lat</th>\n",
              "      <td>3379</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delivery_time</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delivery_gps_time</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delivery_gps_lng</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delivery_gps_lat</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ds</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#find numericals columns\n",
        "numerical_cols = del_df.select_dtypes(include=['int64','float64']).columns\n",
        "numerical_cols"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RoUOUVXGxF_-",
        "outputId": "e56c8661-cf56-40e1-c9aa-efa401976ecb"
      },
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['order_id', 'region_id', 'courier_id', 'lng', 'lat', 'aoi_id',\n",
              "       'aoi_type', 'accept_gps_lng', 'accept_gps_lat', 'delivery_gps_lng',\n",
              "       'delivery_gps_lat', 'ds'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 52
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#filling missing values in numerical columns by their median\n",
        "del_df[numerical_cols] = del_df[numerical_cols].fillna(del_df[numerical_cols].median())\n",
        "del_df.isnull().sum()"
      ],
      "metadata": {
        "id": "9HPfUj8BxnwC",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 617
        },
        "outputId": "f35a67d7-beb2-48ee-aea7-ae70cda8f804"
      },
      "execution_count": 53,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "order_id             0\n",
              "region_id            0\n",
              "city                 0\n",
              "courier_id           0\n",
              "lng                  0\n",
              "lat                  0\n",
              "aoi_id               0\n",
              "aoi_type             0\n",
              "accept_time          2\n",
              "accept_gps_time      2\n",
              "accept_gps_lng       0\n",
              "accept_gps_lat       0\n",
              "delivery_time        2\n",
              "delivery_gps_time    2\n",
              "delivery_gps_lng     0\n",
              "delivery_gps_lat     0\n",
              "ds                   0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>order_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>city</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>courier_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lng</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>lat</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aoi_id</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>aoi_type</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_time</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_time</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_lng</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>accept_gps_lat</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delivery_time</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delivery_gps_time</th>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delivery_gps_lng</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>delivery_gps_lat</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ds</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 53
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#delete rest of missing values in categorical columns\n",
        "del_df.dropna(inplace=True)\n",
        "del_df.drop_duplicates\n",
        "print(del_df.isnull().sum())\n",
        "del_df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 642
        },
        "id": "Q5Ivd7Zq5ivh",
        "outputId": "5d4fa280-ebd6-4b40-c393-79e66b73e230"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "order_id             0\n",
            "region_id            0\n",
            "city                 0\n",
            "courier_id           0\n",
            "lng                  0\n",
            "lat                  0\n",
            "aoi_id               0\n",
            "aoi_type             0\n",
            "accept_time          0\n",
            "accept_gps_time      0\n",
            "accept_gps_lng       0\n",
            "accept_gps_lat       0\n",
            "delivery_time        0\n",
            "delivery_gps_time    0\n",
            "delivery_gps_lng     0\n",
            "delivery_gps_lat     0\n",
            "ds                   0\n",
            "dtype: int64\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   order_id  region_id       city  courier_id        lng       lat  aoi_id  \\\n",
              "0   2031782         10  Chongqing        73.0  108.71571  30.90228    50.0   \n",
              "1   4285071         10  Chongqing      3605.0  108.71639  30.90269    50.0   \n",
              "2   4056800         10  Chongqing      3605.0  108.71645  30.90259    50.0   \n",
              "3   3589481         10  Chongqing      3605.0  108.71650  30.90347    50.0   \n",
              "4   2752329         10  Chongqing      3605.0  108.71608  30.90409    50.0   \n",
              "\n",
              "   aoi_type     accept_time accept_gps_time  accept_gps_lng  accept_gps_lat  \\\n",
              "0      14.0  10-22 10:26:00  10-22 10:26:00       108.71826        30.95587   \n",
              "1      14.0  09-07 10:13:00  09-07 10:13:00       108.71791        30.95635   \n",
              "2      14.0  06-26 09:49:00  06-26 09:49:00       108.71798        30.95635   \n",
              "3      14.0  09-11 11:01:00  09-11 11:01:00       108.71823        30.95596   \n",
              "4      14.0  10-01 09:52:00  10-01 09:52:00       108.71820        30.95598   \n",
              "\n",
              "    delivery_time delivery_gps_time  delivery_gps_lng  delivery_gps_lat  \\\n",
              "0  10-22 17:04:00    10-22 17:04:00         108.66361          30.96702   \n",
              "1  09-09 15:44:00    09-09 15:44:00         108.71644          30.90266   \n",
              "2  06-27 16:03:00    06-27 16:03:00         108.71647          30.90251   \n",
              "3  09-13 17:14:00    09-13 17:14:00         108.71650          30.90341   \n",
              "4  10-01 18:30:00    10-01 18:30:00         108.71413          30.90397   \n",
              "\n",
              "       ds  \n",
              "0  1022.0  \n",
              "1   907.0  \n",
              "2   626.0  \n",
              "3   911.0  \n",
              "4  1001.0  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1063a703-df6f-4029-b2fa-954e9c51aaa5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>order_id</th>\n",
              "      <th>region_id</th>\n",
              "      <th>city</th>\n",
              "      <th>courier_id</th>\n",
              "      <th>lng</th>\n",
              "      <th>lat</th>\n",
              "      <th>aoi_id</th>\n",
              "      <th>aoi_type</th>\n",
              "      <th>accept_time</th>\n",
              "      <th>accept_gps_time</th>\n",
              "      <th>accept_gps_lng</th>\n",
              "      <th>accept_gps_lat</th>\n",
              "      <th>delivery_time</th>\n",
              "      <th>delivery_gps_time</th>\n",
              "      <th>delivery_gps_lng</th>\n",
              "      <th>delivery_gps_lat</th>\n",
              "      <th>ds</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2031782</td>\n",
              "      <td>10</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>73.0</td>\n",
              "      <td>108.71571</td>\n",
              "      <td>30.90228</td>\n",
              "      <td>50.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>10-22 10:26:00</td>\n",
              "      <td>10-22 10:26:00</td>\n",
              "      <td>108.71826</td>\n",
              "      <td>30.95587</td>\n",
              "      <td>10-22 17:04:00</td>\n",
              "      <td>10-22 17:04:00</td>\n",
              "      <td>108.66361</td>\n",
              "      <td>30.96702</td>\n",
              "      <td>1022.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4285071</td>\n",
              "      <td>10</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>3605.0</td>\n",
              "      <td>108.71639</td>\n",
              "      <td>30.90269</td>\n",
              "      <td>50.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>09-07 10:13:00</td>\n",
              "      <td>09-07 10:13:00</td>\n",
              "      <td>108.71791</td>\n",
              "      <td>30.95635</td>\n",
              "      <td>09-09 15:44:00</td>\n",
              "      <td>09-09 15:44:00</td>\n",
              "      <td>108.71644</td>\n",
              "      <td>30.90266</td>\n",
              "      <td>907.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>4056800</td>\n",
              "      <td>10</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>3605.0</td>\n",
              "      <td>108.71645</td>\n",
              "      <td>30.90259</td>\n",
              "      <td>50.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>06-26 09:49:00</td>\n",
              "      <td>06-26 09:49:00</td>\n",
              "      <td>108.71798</td>\n",
              "      <td>30.95635</td>\n",
              "      <td>06-27 16:03:00</td>\n",
              "      <td>06-27 16:03:00</td>\n",
              "      <td>108.71647</td>\n",
              "      <td>30.90251</td>\n",
              "      <td>626.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3589481</td>\n",
              "      <td>10</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>3605.0</td>\n",
              "      <td>108.71650</td>\n",
              "      <td>30.90347</td>\n",
              "      <td>50.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>09-11 11:01:00</td>\n",
              "      <td>09-11 11:01:00</td>\n",
              "      <td>108.71823</td>\n",
              "      <td>30.95596</td>\n",
              "      <td>09-13 17:14:00</td>\n",
              "      <td>09-13 17:14:00</td>\n",
              "      <td>108.71650</td>\n",
              "      <td>30.90341</td>\n",
              "      <td>911.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2752329</td>\n",
              "      <td>10</td>\n",
              "      <td>Chongqing</td>\n",
              "      <td>3605.0</td>\n",
              "      <td>108.71608</td>\n",
              "      <td>30.90409</td>\n",
              "      <td>50.0</td>\n",
              "      <td>14.0</td>\n",
              "      <td>10-01 09:52:00</td>\n",
              "      <td>10-01 09:52:00</td>\n",
              "      <td>108.71820</td>\n",
              "      <td>30.95598</td>\n",
              "      <td>10-01 18:30:00</td>\n",
              "      <td>10-01 18:30:00</td>\n",
              "      <td>108.71413</td>\n",
              "      <td>30.90397</td>\n",
              "      <td>1001.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1063a703-df6f-4029-b2fa-954e9c51aaa5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1063a703-df6f-4029-b2fa-954e9c51aaa5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1063a703-df6f-4029-b2fa-954e9c51aaa5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a07f4d4a-bdc3-48b3-abac-9d9fcbedf243\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a07f4d4a-bdc3-48b3-abac-9d9fcbedf243')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a07f4d4a-bdc3-48b3-abac-9d9fcbedf243 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "del_df"
            }
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#finding timestamps columns and conevrt them to dattime datatypes\n",
        "timestamp_col = ['accept_time', 'accept_gps_time',\n",
        "        'delivery_time', 'delivery_gps_time']\n",
        "\n",
        "\n",
        "\n",
        "for column in timestamp_col:\n",
        "\n",
        "  del_df[column] = '2023-' + del_df[column].astype(str)\n",
        "  del_df[column] = pd.to_datetime(del_df[column],format = '%Y-%m-%d %H:%M:%S', errors='coerce')\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "dw1sxpuf5nDR"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#extract hour , day , weekday,is_weekend from datetime columns\n",
        "for col in timestamp_col:\n",
        "  del_df[col + 'hour'] = del_df[col].dt.hour\n",
        "  del_df[col + 'day'] = del_df[col].dt.day\n",
        "  del_df[col + 'weekday'] = del_df[col].dt.dayofweek\n",
        "  del_df[col + 'is_weekend'] = del_df[col + 'weekday'].apply(lambda day: 1 if day >= 5 else 0 )"
      ],
      "metadata": {
        "id": "JUaFreWWkPfQ"
      },
      "execution_count": 56,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "del_df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nF-xTZCz41ck",
        "outputId": "2667e692-df28-4e0d-f800-450c4c254065"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['order_id', 'region_id', 'city', 'courier_id', 'lng', 'lat', 'aoi_id',\n",
              "       'aoi_type', 'accept_time', 'accept_gps_time', 'accept_gps_lng',\n",
              "       'accept_gps_lat', 'delivery_time', 'delivery_gps_time',\n",
              "       'delivery_gps_lng', 'delivery_gps_lat', 'ds', 'accept_timehour',\n",
              "       'accept_timeday', 'accept_timeweekday', 'accept_timeis_weekend',\n",
              "       'accept_gps_timehour', 'accept_gps_timeday', 'accept_gps_timeweekday',\n",
              "       'accept_gps_timeis_weekend', 'delivery_timehour', 'delivery_timeday',\n",
              "       'delivery_timeweekday', 'delivery_timeis_weekend',\n",
              "       'delivery_gps_timehour', 'delivery_gps_timeday',\n",
              "       'delivery_gps_timeweekday', 'delivery_gps_timeis_weekend'],\n",
              "      dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 57
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#normlize latitude and langitude columns\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "scaler = StandardScaler()\n",
        "lat_lnd_data = del_df[['lat','lng','accept_gps_lng', 'accept_gps_lat','delivery_gps_lng', 'delivery_gps_lat']]\n",
        "\n",
        "scaled_lat_lng = scaler.fit_transform(lat_lnd_data)\n",
        "\n",
        "del_df['scaled_lat'] = scaled_lat_lng[:,0]\n",
        "del_df['scaled_lng'] = scaled_lat_lng[:,1]\n",
        "del_df['scaled_accept_lat'] = scaled_lat_lng[:,2]\n",
        "del_df['scaled_accept_lng'] = scaled_lat_lng[:,3]\n",
        "del_df['accept_gps_lat']  = scaled_lat_lng[:,4]\n",
        "del_df['accept_gps_lng']  = scaled_lat_lng[:,5]\n",
        "\n",
        "\n",
        "del_df.drop(lat_lnd_data,axis=1,inplace=True)"
      ],
      "metadata": {
        "id": "7iMoe3E4DsDy"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#calculate ETA for Delivery Dataset\n",
        "del_df['ETA_delivery'] = del_df['delivery_time'] - del_df['accept_time']\n",
        "del_df['ETA_delivery_hours'] = del_df['ETA_delivery'].dt.total_seconds()/3600"
      ],
      "metadata": {
        "id": "ykrQhhKFesbV"
      },
      "execution_count": 67,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "hMGvz185nmQ-"
      },
      "execution_count": 59,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "del_df['ETA_delivery_hours']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 458
        },
        "id": "2sZbDfhsnPkN",
        "outputId": "eef35ae6-37e2-4708-9c84-32b64240363d"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0           6.633333\n",
              "1          53.516667\n",
              "2          30.233333\n",
              "3          54.216667\n",
              "4           8.633333\n",
              "             ...    \n",
              "3181798     2.316667\n",
              "3181799     5.100000\n",
              "3181800     0.883333\n",
              "3181801     8.033333\n",
              "3181802     5.083333\n",
              "Name: ETA_delivery_hours, Length: 3181801, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ETA_delivery_hours</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>6.633333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>53.516667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>30.233333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>54.216667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>8.633333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3181798</th>\n",
              "      <td>2.316667</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3181799</th>\n",
              "      <td>5.100000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3181800</th>\n",
              "      <td>0.883333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3181801</th>\n",
              "      <td>8.033333</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3181802</th>\n",
              "      <td>5.083333</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>3181801 rows × 1 columns</p>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "rY7Cjuxczncv"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}